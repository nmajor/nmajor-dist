<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NMajor Blog</title>
    <description>A blog filled with adventures in tech</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Aug 2018 20:42:12 +0100</pubDate>
    <lastBuildDate>Tue, 21 Aug 2018 20:42:12 +0100</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Using Socket.io with Redux - Websocket Redux Middleware</title>
        <description>&lt;p&gt;This article uses socket.io as the websocket library. If you want to see a version of this article using ActionCable, &lt;a href=&quot;/posts/making-redux-middleware-for-websockets&quot; title=&quot;/posts/making-redux-middleware-for-websockets&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Middleware is one of the most powerful and useful features of redux. If you’re unfamiliar with redux middleware, it is a way to insert extra behavior into dispatched redux actions.&lt;/p&gt;

&lt;p&gt;Today we’re going to use it to make a clean and powerful way to manage our socket.io events. Basically we want to subscribe to specific events and then dispatch specific redux actions anytime those events are broadcast to us from the socket.io server.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;Check out the [redux middleware documentation here](&lt;a href=&quot;https://redux.js.org/advanced/middleware&quot; title=&quot;https://redux.js.org/advanced/middleware&quot;&gt;https://redux.js.org/advanced/middleware&lt;/a&gt;). The code below is inspired by reading through the source of [this example redux app](&lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;https://github.com/erikras/react-redux-universal-hot-example&lt;/a&gt;), specifically [this middleware](&lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot;&gt;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&lt;/a&gt;), so you may also want to check that out as well.&lt;/p&gt;

&lt;h3 id=&quot;typical-redux-actions&quot;&gt;Typical Redux Actions&lt;/h3&gt;

&lt;p&gt;Redux actions, by default, looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'MY_ACTION_TYPE'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...some_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Redux actions have 1 required attribute, &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. Anything else is just extra and is usually meant to be used by the reducer to mutate the state.&lt;/p&gt;

&lt;p&gt;By using redux middleware we can define our own action patterns and structures. The middleware will check if the action has other specific attributes and handle that action differently than the others. That way all we have to do to trigger some custom redux behavior is dispatch an action with our specific attributes and it will automatically be handled differently.&lt;/p&gt;

&lt;p&gt;Specifically we are going to create a new kind of action that will start listening for specific socket.io events and dispatch a new redux action anytime that event comes through from the server. We’ll also be able to stop listening for any specific event.&lt;/p&gt;

&lt;h3 id=&quot;middleware-function&quot;&gt;Middleware Function&lt;/h3&gt;

&lt;p&gt;First lets make a middleware function, you’ll want to export this function from a file. I called my file `socketMiddleware.js`:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import io from 'socket.io-client';

export default function socketMiddleware() {
  const socket = io();

  return ({ dispatch }) =&amp;gt; next =&amp;gt; (action) =&amp;gt; {
    if (typeof action === 'function') {
      return next(action);
    }

    const {
      event,
      leave,
      handle,
      ...rest
    } = action;

    if (!event) {
      return next(action);
    }

    if (leave) {
      socket.removeListener(event);
    }

    let handleEvent = handle;
    if (typeof handleEvent === 'string') {
      handleEvent = result =&amp;gt; dispatch({ type: handle, result, ...rest });
    }
    return socket.on(event, handleEvent);
  };
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lets break down this code:&lt;/p&gt;

&lt;p&gt;Basically we first skip our middleware if the action is a function or if there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; attribute in our action.&lt;/p&gt;

&lt;p&gt;Then if there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; attribute, then we remove the event listener&lt;/p&gt;

&lt;p&gt;Else we create a new event listener.&lt;/p&gt;

&lt;p&gt;But you will notice that we are doing some quick logic to check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; attribute is a string. And if it is, we are changing its value to be a function that dispatches a new action with the received data. So basically our &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attribute can take both an action type string or an actual function. This gives us an extra level of control over how we handle the data coming in from the socket.io server.&lt;/p&gt;

&lt;p&gt;And any data that is sent from the socket.io server is included in the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; attribute of the action. So the reducer can have easy access to any data the server sent. Also any extra action attributes (&lt;code class=&quot;highlighter-rouge&quot;&gt;...rest&lt;/code&gt;) are just passed directly through to the dispatched action.&lt;/p&gt;

&lt;h3 id=&quot;add-middleware-to-redux&quot;&gt;Add Middleware to Redux&lt;/h3&gt;

&lt;p&gt;Then we have to apply our new middlware. Check the [redux documentation](&lt;a href=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot; title=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot;&gt;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&lt;/a&gt;) for how to do this. But you will probably need to do something like this when setting up your store:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import { createStore, applyMiddleware } from 'redux';
import socketMiddleware from './middleware/socketMiddleware';
import rootReducer from './reducers/index';

const store = createStore(
  rootReducer,
  applyMiddleware(socketMiddleware)
);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;our-new-action-creators&quot;&gt;Our New Action Creators&lt;/h3&gt;

&lt;p&gt;We now have access to a new type of action that has new required attributes. If we dispatch an action with a &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; attribute it will trigger our cable middleware.&lt;/p&gt;

&lt;p&gt;Here are some example action creators using our new middleware.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export function subscribeMessages() {
  return {
    event: 'message',
    handle: NEW_MESSAGE,
  }
}

export function unsubscribeMessages() {
  return {
    event: 'message',
    leave: true,
  }
}

// Action creator with received function:
export function subscribeConversation() {
  return dispatch =&amp;gt; dispatch({
    event: 'message',
    handle: data =&amp;gt; dispatch({
      type: NEW_MESSAGE,
      payload: data.message,
    }),
  });
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You’ll notice these actions don’t even have the required &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute, this is because when they are dispatched we hijack the action and do out own thing, so these particular actions never makes it to the reducer.&lt;/p&gt;

&lt;p&gt;Instead we have an &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; attribute required to start listening for an event, and &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt;, attributes to stop listening.&lt;/p&gt;

&lt;p&gt;The important part here is that &lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; is either an action string to dispatch when new data comes in, or a function to run when new data comes in, but since that function can be another call to dispatch, we have the convenience of a useful default and the flexibility to do whatever we want.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I’m now a huge fan of redux middleware, I love how it cleans up and simplifies doing complex repetitive things in our action creators.&lt;/p&gt;

&lt;p&gt;Now we’ve set this up we can subscribe and unsubscribe to socket.io events really easily just by dispatching one of our new action creators.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jul 2018 01:00:00 +0100</pubDate>
        <link>/posts/using-socket-io-with-redux-websocket-redux-middleware</link>
        <guid isPermaLink="true">/posts/using-socket-io-with-redux-websocket-redux-middleware</guid>
        
        
      </item>
    
      <item>
        <title>Using Action Cable with Redux - Websocket Redux Middleware</title>
        <description>&lt;p&gt;This article uses ActionCable as the websocket library. If you want to see a version of this article using socket.io, &lt;a href=&quot;/posts/using-socket-io-with-redux-websocket-redux-middleware&quot; title=&quot;/posts/using-socket-io-with-redux-websocket-redux-middleware&quot;&gt;click here.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Middleware is one of the most powerful and useful features of redux. If you’re unfamiliar with redux middleware, it is a way to insert extra behavior into dispatched redux actions.&lt;/p&gt;

&lt;p&gt;Today we’re going to use it to make a clean and powerful way to manage our subscriptions to different Action Cable channels+rooms this also means taking the data sent to use through action cable and dispatching the appropriate redux actions to mutate the state.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with redux middleware, check out the [documentation here](&lt;a href=&quot;https://redux.js.org/advanced/middleware&quot; title=&quot;https://redux.js.org/advanced/middleware&quot;&gt;https://redux.js.org/advanced/middleware&lt;/a&gt;). The code below is inspired by reading through the source of [this example redux app](&lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;https://github.com/erikras/react-redux-universal-hot-example&lt;/a&gt;), specifically [this middleware](&lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot;&gt;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&lt;/a&gt;), so you may also want to check that out as well.&lt;/p&gt;

&lt;h3 id=&quot;typical-redux-actions&quot;&gt;Typical Redux Actions&lt;/h3&gt;

&lt;p&gt;Basically redux action, by default, looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'MY_ACTION_TYPE'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...some_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Redux actions have 1 required attribute, &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. Anything else is just extra and is usually meant to be used by the reducer to mutate the state.&lt;/p&gt;

&lt;p&gt;By using redux middleware we can define our own action patterns and structures. Then when any action is dispatched we can check if the action matches a specific pattern and have it do different things.&lt;/p&gt;

&lt;p&gt;Specifically we are going to create a new kind of action that will subscribe or unsubscribe to specific Action Cable channels+rooms.&lt;/p&gt;

&lt;h3 id=&quot;middleware-function&quot;&gt;Middleware Function&lt;/h3&gt;

&lt;p&gt;First lets make a middleware function, you’ll want to export this function from a file. I called my file `cableMiddleware.js`:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import ActionCable from 'actioncable';

export default function cableMiddleware() {
  const cable = ActionCable.createConsumer('/cable');

  return ({ dispatch, getState }) =&amp;gt; next =&amp;gt; (action) =&amp;gt; {
    if (typeof(action) === 'function') {
      return next(action)
    }

    const {
      channel,
      room,
      leave,
    } = action;
    let { received } = action;

    if (!channel) {
      return next(action);
    }

    if (leave) {
      const subscription = _.find(
        cable.subscriptions.subscriptions,
        sub =&amp;gt; sub.identifier === JSON.stringify({ channel, room }),
      );

      return cable.subscriptions.remove(subscription);
    }

    if (typeof(received) === 'string') {
      received = result =&amp;gt; dispatch({ type: received, result })
    }

    return cable.subscriptions.create({ channel, room }, { received });
  };
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lets break down this code:&lt;/p&gt;

&lt;p&gt;Basically we first skip our middleware if the action is a function or if there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; attribute in our action.&lt;/p&gt;

&lt;p&gt;Then if there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; attribute, then we remove the action cable subscription to the channel+room.&lt;/p&gt;

&lt;p&gt;Else we create a subscription to the channel+room.&lt;/p&gt;

&lt;p&gt;But you will notice that we are doing some quick logic to check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attribute is a string. And if it is we are changing its value to be a function that dispatches a new action with the received data. So basically our &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attribute can take both an action type string or an actual function. This gives us an extra level of control over how we handle the data coming in from Action Cable.&lt;/p&gt;

&lt;h3 id=&quot;add-middleware-to-redux&quot;&gt;Add Middleware to Redux&lt;/h3&gt;

&lt;p&gt;Then we have to apply our new middlware. Check the [redux documentation](&lt;a href=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot; title=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot;&gt;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&lt;/a&gt;) for how to do this. But you will probably need to do something like this when setting up your store:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import { createStore, applyMiddleware } from 'redux';
import clientMiddleware from './middleware/clientMiddleware';
import rootReducer from './reducers/index';

const store = createStore(
  rootReducer,
  applyMiddleware(clientMiddleware())
);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Our other file is actually exporting a middleware creator function, so don’t forget to execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;clientMiddleware&lt;/code&gt; function when applying it to redux. This will also create the Action Cable connection only once when the store loads so we don’t have to worry about creating a new connection every time.&lt;/p&gt;

&lt;h3 id=&quot;our-new-action-creators&quot;&gt;Our New Action Creators&lt;/h3&gt;

&lt;p&gt;We now have access to a new type of action that has new required attributes. Basically if we dispatch an action with a &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; attribute it will trigger our cable middleware.&lt;/p&gt;

&lt;p&gt;Here are some example action creators using our new middleware.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export function subscribeConversation(conversationId) {
  return {
    channel: 'conversations',
    room: `conversation_${conversationId}`,
    received: NEW_MESSAGE,
  }
}

export function unsubscribeConversation(conversationId) {
  return {
    channel: 'conversations',
    room: `conversation_${conversationId}`,
    leave: true,
  }
}

// Action creator with received function:
export function subscribeConversation(conversationId) {
  return dispatch =&amp;gt; dispatch({
    channel: 'conversations',
    room: `conversation_${conversationId}`,
    received: data =&amp;gt; dispatch({
      type: NEW_MESSAGE,
      payload: data.conversation,
    }),
  });
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You’ll notice these actions don’t even have the required &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute, this is because when they are dispatched we hijack the action and do out own thing, so these particular actions never makes it to the reducer.&lt;/p&gt;

&lt;p&gt;Instead we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;room&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attributes required to subscribe to a channel+room, and &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;room&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt;, attributes required to unsubscribe from a channel+room.&lt;/p&gt;

&lt;p&gt;The important part here is that &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; is either an action string to dispatch when new data comes in, or a function to run when new data comes in.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I’m now a huge fan of redux middleware, I love how it cleans up and simplifies doing complex repetative things in our action creators.&lt;/p&gt;

&lt;p&gt;Now we’ve set this up we can subscribe and unsubscribe to rooms and channels very easily, as well as handle the data from the server in very robust and dynamic ways.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jul 2018 01:00:00 +0100</pubDate>
        <link>/posts/making-redux-middleware-for-websockets</link>
        <guid isPermaLink="true">/posts/making-redux-middleware-for-websockets</guid>
        
        <category>redux</category>
        
        <category>javascript</category>
        
        <category>websockets</category>
        
        <category>react</category>
        
        <category>rails</category>
        
        <category>actioncable</category>
        
        
      </item>
    
      <item>
        <title>Adding ESLint to Your Project with a Git Hook</title>
        <description>&lt;p&gt;Linters can be annoying at first, but I feel like they really help me write better code. Plus they are great for working in teams to make sure everyone is following the same conventions.&lt;/p&gt;

&lt;p&gt;We’re going to walk through how to setup ESLint and add it to our project using a git pre-commit hook.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First install the package eslint:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn add eslint --only=dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then initialize init and it will walk you through a typical setup:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn eslint --init
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;These are the options I selected. I like to start with the AirBnB template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;? How would you like to configure ESLint? Use a popular style guide
? Which style guide do you want to follow? Airbnb
? Do you use React? Yes
? What format do you want your config file to be in? JSON
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The airbnb template is already set up to use react and it will install all sorts of nice dependencies for you.&lt;/p&gt;

&lt;p&gt;And thats basically it!&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;It creates a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;eslintrc.json&lt;/code&gt; (the file will be different depending on which format you chose). And in this file will be your configuration.&lt;/p&gt;

&lt;p&gt;If you open that file it will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So it is basically just copying all of airbnb’s rules. So if we want to now change the rules we are using we need to manually add them. We can turn off or change any rule and any rule we specify in our file will override the airbnb rule.&lt;/p&gt;

&lt;p&gt;Here is an example of how to disable a rule called &lt;code class=&quot;highlighter-rouge&quot;&gt;no-underscore-dangle&lt;/code&gt; and change the rule called &lt;code class=&quot;highlighter-rouge&quot;&gt;react/jsx-filename-extension&lt;/code&gt; which requires all javascript files what use jsx to have the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt;. This rule change also allows you to have &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; extension.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react/jsx-filename-extension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extensions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.jsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;no-underscore-dangle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To disable eslint totally on a specific line, you can add this at the end of the line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;var foo = &quot;bar&quot; // eslint-disable-line
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And to disable 1 rule on that line you can add the rule like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;var foo = &quot;bar&quot; // eslint-disable-line no-alert
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can also do it this way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;// eslint-disable-next-line
var foo = &quot;bar&quot;

// eslint-disable-next-line no-alert
var foo = &quot;bar&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can lint any file by running &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn eslint path/to/file.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also configure your editor to display any lint issues inline for you.&lt;/p&gt;

&lt;p&gt;You can also set up a git pre-commit script to run before each commit which will enforce the lint rules in a very strong way.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-eslint-pre-commit-git-hook&quot;&gt;Setting up a ESLint pre-commit git hook&lt;/h2&gt;

&lt;p&gt;I’m assuming you already have a git repo setup.&lt;/p&gt;

&lt;p&gt;Create a new file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;touch .git/hooks/pre-commit
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Make the file executable:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;chmod +x .git/hooks/pre-commit
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then paste in this code here into that file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;STAGED_FILES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git diff --cached --name-only --diff-filter&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ACM | grep &lt;span class=&quot;s2&quot;&gt;&quot;.jsx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0,1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ESLINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/node_modules/.bin/eslint&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$STAGED_FILES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true

printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Validating Javascript:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Check for eslint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! -x &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESLINT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[41mPlease install ESlint&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m (npm i --save-dev eslint)&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

for &lt;/span&gt;FILE &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STAGED_FILES&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESLINT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[32mESLint Passed: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[41mESLint Failed: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi
done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Javascript validation completed!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ! &lt;span class=&quot;nv&quot;&gt;$PASS&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[41mCOMMIT FAILED:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m Your commit contains files that should pass ESLint but do not. Please fix the ESLint errors and try again.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[42mCOMMIT SUCCEEDED&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This code is from [this article](&lt;a href=&quot;https://medium.com/@shettyrahul8june/how-to-run-eslint-using-pre-commit-hook-25984fbce17e&quot; title=&quot;https://medium.com/@shettyrahul8june/how-to-run-eslint-using-pre-commit-hook-25984fbce17e&quot;&gt;https://medium.com/@shettyrahul8june/how-to-run-eslint-using-pre-commit-hook-25984fbce17e&lt;/a&gt;) which references [this gist](&lt;a href=&quot;https://gist.github.com/rashtay/328da46a99a9d7c746636df1cf769675&quot; title=&quot;https://gist.github.com/rashtay/328da46a99a9d7c746636df1cf769675&quot;&gt;https://gist.github.com/rashtay/328da46a99a9d7c746636df1cf769675&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Now anytime someone commits, any javascript files included in the commit will have to pass the lint test!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jul 2018 01:00:00 +0100</pubDate>
        <link>/posts/adding-eslint-to-your-project</link>
        <guid isPermaLink="true">/posts/adding-eslint-to-your-project</guid>
        
        <category>javascript</category>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>React CSS - Styled Components</title>
        <description>&lt;h2 id=&quot;why-i-prefer-styled-components&quot;&gt;Why I prefer Styled Components&lt;/h2&gt;

&lt;p&gt;I prefer Styled Components because I feel like it is more inline with the core component philosophy of react. React is all about creating reusable components, and really pushed the idea of bundling the templating (HTML) and behavior (JS) together into components. So it always felt a bit wonky to me to still put my CSS in a separate file and connect my styling using regular CSS &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; targeting.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;Styled Components allow us to bundle the templating (HTML), behavior (JS), and styling (CSS) all together. And similar to how JSX lets us write HTML in with our Javascript, Styled Components let us write classic CSS, but it has many classic JS ways for us to manage our styling logic.&lt;/p&gt;

&lt;p&gt;From the [documentation](&lt;a href=&quot;https://www.styled-components.com/&quot; title=&quot;https://www.styled-components.com/&quot;&gt;https://www.styled-components.com/&lt;/a&gt;): Styled components combine the html element and the rules that style it.&lt;/p&gt;

&lt;h2 id=&quot;installation-and-basic-use-of-styled-components&quot;&gt;Installation and basic use of Styled Components&lt;/h2&gt;

&lt;p&gt;Styled Component are quite easy to use. First install the module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn add styled-components
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And here is a basic example of how to use it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import styled from 'styled-components';

const Wrapper = styled.div`
  height: 100%;
  width: 100%;
`;

const Header = styled.header`
  width: 100%;
  height: 70px;
  background-color: #333;
  border-bottom: 1px solid #333;
  display: flex;
`;

const Body = styled.div`
  background-color: #fff;
  color: #333;
`;

export default function App(props) {
  return (
    &amp;lt;Wrapper&amp;gt;
      &amp;lt;Header/&amp;gt;
      &amp;lt;Body&amp;gt;
        &amp;lt;p&amp;gt;Hello Styled Components&amp;lt;/p&amp;gt;
      &amp;lt;/Body&amp;gt;
    &amp;lt;/Wrapper&amp;gt;
  );
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, you just create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;styled&lt;/code&gt; object we imported. That new &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is now a component we can use when we render. So no more dealing with classNames, the connection from the component to its styling is made directly.&lt;/p&gt;

&lt;p&gt;Because its CSS we can use all the classic CSS features like media queries, nesting, and psudo-selectors.&lt;/p&gt;

&lt;p&gt;We can also simple interpolate, like this example from [the documentation](&lt;a href=&quot;https://www.styled-components.com/&quot; title=&quot;https://www.styled-components.com/&quot;&gt;https://www.styled-components.com/&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const Button = styled.button`
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;

  ${props =&amp;gt; props.primary &amp;amp;&amp;amp; css`
    background: palevioletred;
    color: white;
  `}
`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When you interpolate a function in the CSS string definition like this, that function automatically has access to the props from the component it is being used in. Thats pretty neat.&lt;/p&gt;

&lt;p&gt;You can also attach props to the Styled Component and then add interpolated logic based on those props. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;// In the render:
&amp;lt;Header size=&quot;3em&quot;&amp;gt;&amp;lt;/Header&amp;gt;

// In the Styled Component definition
const Header = styled.div`
  size: ${props =&amp;gt; props.size || '1em'}
`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Or if we are trying to just extend an existing styled component without any logic we can do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const Button = styled.button`
  color: palevioletred;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

// We're extending Button with some extra styles
const TomatoButton = Button.extend`
  color: tomato;
  border-color: tomato;
`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can also wrap any existing component.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const HelloComponent = props =&amp;gt; &amp;lt;div&amp;gt;Hello Styled Components!&amp;lt;/div&amp;gt;
const StyledComponent = styled(HelloComponent)`
  color: blue;
`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This is particularly useful when working with libraries like &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router&lt;/code&gt; because they give you components like &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; to use.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;// Link component from react-router
const StyledLink = styled(Link)`
  color: pink;

  &amp;amp;:hover {
    text-decoration: none;
  }
`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are a few more tricks available. Checkout the [full documentation](&lt;a href=&quot;https://www.styled-components.com/docs&quot; title=&quot;https://www.styled-components.com/docs&quot;&gt;https://www.styled-components.com/docs&lt;/a&gt;) for more.&lt;/p&gt;

&lt;p&gt;Styled Components, allow us to really simplify our display logic while still being able to customize our styling in complex ways. Oh yeah, it also works with React Native.&lt;/p&gt;

&lt;p&gt;So give Styled Components a try!&lt;/p&gt;

&lt;p&gt;I don’t really go into some of the other options for CSS with React, so for a nice outline of some of the other approaches check [this article](&lt;a href=&quot;https://blog.logrocket.com/the-best-styling-in-react-tutorial-youve-ever-seen-676f1284b945&quot; title=&quot;https://blog.logrocket.com/the-best-styling-in-react-tutorial-youve-ever-seen-676f1284b945&quot;&gt;https://blog.logrocket.com/the-best-styling-in-react-tutorial-youve-ever-seen-676f1284b945&lt;/a&gt;) out.&lt;/p&gt;

&lt;p&gt;You can also see the Official Documentation for Styled Components [here](&lt;a href=&quot;https://www.styled-components.com/&quot; title=&quot;https://www.styled-components.com/&quot;&gt;https://www.styled-components.com/&lt;/a&gt;).&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jul 2018 01:00:00 +0100</pubDate>
        <link>/posts/react-css-styled-components</link>
        <guid isPermaLink="true">/posts/react-css-styled-components</guid>
        
        <category>react</category>
        
        <category>css</category>
        
        
      </item>
    
      <item>
        <title>Get a Facebook Page Access Token That Never Expires</title>
        <description>&lt;p&gt;With the facebook API, page tokens can often be used in place of user tokens. This is very useful because if you are doing something with a business, its not ideal to have to use your own user token for everything. However, if you don’t want to have to recreate a new token all the time, you have to go through the process of getting a long-lived page access token.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT! -&lt;/strong&gt; Make sure that your user has permissions to access both the Facebook page and the Facebook groups, and make sure that the Facebook groups are linked to the Facebook page!&lt;/p&gt;

&lt;p&gt;Now lets talk about some definitions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;short-lived user access token&lt;/strong&gt;: This is the regular user_access_token, and it typically lasts about 2 hours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;long-lived user access token&lt;/strong&gt;: This user access token last about 60 days and you get it by extending a short-lived user access token&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;page access token&lt;/strong&gt;: These are similar to user access tokens and are created using a user access token.&lt;/p&gt;

&lt;p&gt;If you create a page access token using a short-lived user access token, it is also short-lived and expires in about 2 hours.&lt;/p&gt;

&lt;p&gt;But if you create a page access token using a long-lived user access token, then it does not have an expiration date. It lasts until its access is revoked.&lt;/p&gt;

&lt;p&gt;Bingo!&lt;/p&gt;

&lt;p&gt;To get a user access token you first have to have a facebook app, and then the user (in this case, you) has to grant permissions to your app. Specifically your app needs the permission called &lt;code class=&quot;highlighter-rouge&quot;&gt;manage_pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is to use &lt;a href=&quot;https://developers.facebook.com/tools/explorer&quot;&gt;Facebook’s Graph API Explorer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open up the page, then select your app Application dropdown and select “Get User Access Token” from the other dropdown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then in the popup, make sure you check the box for &lt;code class=&quot;highlighter-rouge&quot;&gt;manage_pages&lt;/code&gt; and click “Get Access Token”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then your access token will be populated in the Access Token field:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, then we need to exchange that short-lived token for a long-lived token, and we can do it with this same Facebook Graph API Explorer tool.&lt;/p&gt;

&lt;p&gt;We need to make a GET request to the Facebook Graph API to the path &lt;code class=&quot;highlighter-rouge&quot;&gt;/oauth/access_token&lt;/code&gt; with the following parameters:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;/oauth/access_token?  
    grant_type=fb_exchange_token&amp;amp;           
    client_id={app-id}&amp;amp;
    client_secret={app-secret}&amp;amp;
    fb_exchange_token={short-lived-token-we-just-made} 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So make a string that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;/oauth/access_token?grant_type=fb_exchange_token&amp;amp;client_id=9382767696389008&amp;amp;client_secret=1aac234d48ce90uu57c1b579faa92f00ufa&amp;amp;fb_exchange_token=EAAcZBbBDPXSwBACfeRskLz5LJJCigZBZBDyr4pmZCcVsrpFaoDUDSXthSDzdq4bqO75iEE17TBbpxIyQ1eTR3OIfGq2KPZBloF4xJ0I1GU1hxOnCGJmZBVg0DXU4IrDgcURm4ceKE4M1ZAFdGNmt5y2shsETLxAEKwZD
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And paste it into here and you’ll get your long-lived access token in the response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers4-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you have your long-lived user access token, we can exchange it by making a GET request in the Facebook Graph API Explorer to get the long-lived page access token.&lt;/p&gt;

&lt;p&gt;You need to take that long-lived user access token and paste it into the Access Token field then put this in the path field:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fb-page-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]/?fields=access_token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then you will get your long-lived page access token in the response!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Facebook Documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access Tokens: &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens&quot; title=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens&quot;&gt;https://developers.facebook.com/docs/facebook-login/access-tokens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extending Tokens: &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens/expiration-and-extension&quot; title=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens/expiration-and-extension&quot;&gt;https://developers.facebook.com/docs/facebook-login/access-tokens/expiration-and-extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
        <link>/posts/get-a-facebook-page-access-token-that-never-expires</link>
        <guid isPermaLink="true">/posts/get-a-facebook-page-access-token-that-never-expires</guid>
        
        <category>facebook</category>
        
        
      </item>
    
      <item>
        <title>Express.js With ES6 and Babel</title>
        <description>&lt;p&gt;Express.js doesn’t come with es6 out of the box. But its actually not that hard to add.&lt;/p&gt;

&lt;p&gt;I’m going to go over how to easily add ES6 support to your project using the &lt;a href=&quot;https://www.npmjs.com/package/babel-cli&quot; title=&quot;babel-cli&quot;&gt;babel-cli&lt;/a&gt;, as well as show you some of the things you need to do so your app will be ready for production later.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-cli&lt;/code&gt; gives us a command line tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-node&lt;/code&gt; that wraps around node and converts our ES6 code to basic javascript that node can read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However it is not recommended to use babel-node in production&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-express-app&quot;&gt;New Express App&lt;/h3&gt;

&lt;p&gt;First lets use the &lt;a href=&quot;http://expressjs.com/en/starter/generator.html&quot;&gt;express-generator&lt;/a&gt; to make a new Express.js app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ express --view pug --css sass new-app
$ cd new-app
$ npm install
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This generates a new express app in a new folder called new-app. And as you can see, I’ve told express to use sass for css and pug for the html templating.&lt;/p&gt;

&lt;h3 id=&quot;rearrange-files&quot;&gt;Rearrange Files&lt;/h3&gt;

&lt;p&gt;We are going to need to rearrange things a bit. This is because of the production build. We want all the javascript files isolated in a subfolder of our app because later we are going to tell babel to compile all the files and things get really messy if all our code is in at the same level as our dot files, node_modules folder, etc…&lt;/p&gt;

&lt;p&gt;So lets make a new folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; and move all our express stuff into it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ mkdir app
$ mv bin public routes views app.js app/
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-babel&quot;&gt;Install Babel&lt;/h3&gt;

&lt;p&gt;First we need to add 2 babel packages to our apps dev-dependencies.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ npm install babel-cli --save-dev
$ npm install babel-preset-env --save-dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;babel-preset-env&lt;/a&gt; by default behaves like &lt;a href=&quot;&quot;&gt;babel-preset-latest&lt;/a&gt;. Basically it includes all the new features of ECMAScript that are standardized each year. But it also allows you to specify specific environments to build for such as specific browsers you want to support.&lt;/p&gt;

&lt;p&gt;Next we need to add the babel configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; to our app folder. Make it look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This just tells babel to use &lt;a href=&quot;&quot;&gt;babel-preset-env&lt;/a&gt; that we just installed but take a look as some of the other configuration settings you can specify &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;try-it-out&quot;&gt;Try it Out&lt;/h3&gt;

&lt;p&gt;To try it out lets open our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file and replace this line&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;var express = require('express');
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;with this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import express from 'express';
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And then we run express with babel with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ babel-node app/bin/www
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;p&gt;And you will notice that if you just run &lt;code class=&quot;highlighter-rouge&quot;&gt;node app/bin/www&lt;/code&gt; you get an error which is expected.&lt;/p&gt;

&lt;p&gt;Now lets add a npm script to make running this easier. Open up your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file and lets add a new line in the scripts section so it looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;...
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;,
    &quot;start:dev&quot;: &quot;babel-node ./app/bin/www&quot;
  }
...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we can run our babelized app with the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;npm run start:dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You might be asking, “Why don’t we just use the existing start script”. We need to save that for production because many production environments use the start script to run the app, but obviously we need to change it since we know &lt;code class=&quot;highlighter-rouge&quot;&gt;node ./bin/www&lt;/code&gt; doesn’t work.&lt;/p&gt;

&lt;h3 id=&quot;preparing-for-production&quot;&gt;Preparing for Production&lt;/h3&gt;

&lt;p&gt;So to prepare our app for production we need a build step that will take our ES6 code and generate node-friendly ES5 code in a file somewhere that node can run.&lt;/p&gt;

&lt;p&gt;To do this I like to another npm script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;...
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;,
    &quot;start:dev&quot;: &quot;babel-node ./app/bin/www&quot;,
    &quot;build&quot;: &quot;rm -rf ./build &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; babel --out-dir ./build --source-maps --copy-files ./app&quot;
  }
...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see this build script removes and recreates any existing &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder, and then runs the command &lt;code class=&quot;highlighter-rouge&quot;&gt;babel --out-dir ./build --source-maps --copy-files ./app&lt;/code&gt; which compiles all the javascript files and copies any other files  into the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder. Checkout &lt;a href=&quot;https://babeljs.io/docs/usage/cli/&quot;&gt;this page&lt;/a&gt; for more info on how the babel command works.&lt;/p&gt;

&lt;p&gt;You may want to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then the last thing to do is to change the start script to look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&quot;start&quot;: &quot;node ./app/bin/www&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we are good to go.&lt;/p&gt;

&lt;p&gt;Just make sure you run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; as part of any deployment into production.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate>
        <link>/posts/express-js-with-es6-and-babel</link>
        <guid isPermaLink="true">/posts/express-js-with-es6-and-babel</guid>
        
        <category>express</category>
        
        <category>node</category>
        
        <category>babel</category>
        
        <category>es6</category>
        
        
      </item>
    
      <item>
        <title>Deploying Node.js on Azure App Services</title>
        <description>&lt;p&gt;I know, I know, I know, Microsoft is not the company you think of when its time to figure out where to host your Node.js app, but Azure has a surprisingly robust suite of services now. And deploying to &lt;a href=&quot;https://azure.microsoft.com/en-us/services/app-service/&quot; title=&quot;Azure App Service&quot;&gt;Azure App Services&lt;/a&gt; was easier than I expected.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;In this post I’m going to go over how to deploy a Node.js app to Azure App Services and also mention some of the things I learned from working with Azure.&lt;/p&gt;

&lt;h1 id=&quot;your-azure-account&quot;&gt;Your Azure Account&lt;/h1&gt;

&lt;h3 id=&quot;azure-account&quot;&gt;Azure account&lt;/h3&gt;

&lt;p&gt;First of all, you need to make sure you have an Azure account. If you don’t have one you can sign up for Azure &lt;a href=&quot;https://azure.microsoft.com/free/&quot; title=&quot;Azure Signup&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;azure-subscription&quot;&gt;Azure Subscription&lt;/h3&gt;

&lt;p&gt;Azure requires you to have something called a subscription before you can start using Azure services. This subscription is basically a billing program.&lt;/p&gt;

&lt;p&gt;Double check that you have a subscription by going to this page in your Azure portal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade&quot; title=&quot;https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade&quot;&gt;https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don’t see a subscription listed, then add one.&lt;/p&gt;

&lt;p&gt;If you have just signed up you’ll notice that one of the subscription options is “Free Trial” so you can use that and then later change to a “Pay as You Go” option later if you run out of free resources.&lt;/p&gt;

&lt;h3 id=&quot;azure-command-line-tool&quot;&gt;Azure Command Line Tool&lt;/h3&gt;

&lt;p&gt;We are going to be doing this entire setup using the Azure command line tool.&lt;/p&gt;

&lt;p&gt;You can download and install the command line tool by following the [instructions here](&lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot; title=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot;&gt;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Once you have that installed and working, we are ready to get started deploying the app.&lt;/p&gt;

&lt;h3 id=&quot;create-a-deployment-user&quot;&gt;Create a deployment user&lt;/h3&gt;

&lt;p&gt;This deployment user will be used when deploying your code. Basically we are going to configure the app to be deployed with git so when you do a &lt;code class=&quot;highlighter-rouge&quot;&gt;git push azure master&lt;/code&gt; it will ask you for the password that you set here.&lt;/p&gt;

&lt;p&gt;Run this in the command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az webapp deployment user set --user-name &amp;lt;username&amp;gt; --password &amp;lt;password&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-a-resource-group&quot;&gt;Create a resource group&lt;/h3&gt;

&lt;p&gt;Resource groups are basically just a way to group together resources so you can easily monitor them together, track costs, and stuff.&lt;/p&gt;

&lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;my-resource-group&amp;gt;&lt;/code&gt; with a resource group name you want.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az group create --name &amp;lt;my-resource-group&amp;gt; --location westeurope
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-a-service-plan&quot;&gt;Create a service plan&lt;/h3&gt;

&lt;p&gt;This is where you will set the how many resources your app will use.&lt;/p&gt;

&lt;p&gt;The command below will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;FREE&lt;/code&gt; tier app that has about 1 GB of RAM. You could also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;--sku&lt;/code&gt; tag to &lt;code class=&quot;highlighter-rouge&quot;&gt;BASIC&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARED&lt;/code&gt; or any of the other [service plans here](&lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/app-service/&quot; title=&quot;https://azure.microsoft.com/en-us/pricing/details/app-service/&quot;&gt;https://azure.microsoft.com/en-us/pricing/details/app-service/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Also be sure to set your &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;my-app-service-plan&amp;gt;&lt;/code&gt; and also make sure you set &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;my-resource-group&amp;gt;&lt;/code&gt; to your resource group name from earlier.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az appservice plan create --name &amp;lt;my-app-service-plan&amp;gt; --resource-group &amp;lt;my-resource-group&amp;gt; --sku FREE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-the-app&quot;&gt;Create the app&lt;/h3&gt;

&lt;p&gt;Now we actually create the app, you have to give your app an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; and then make sure you paste in all the other options from things you’ve created previously.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az webapp create --name &amp;lt;app-name&amp;gt; --resource-group &amp;lt;my-resource-group&amp;gt; --plan &amp;lt;my-app-service-plan&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configure-git-for-deployment&quot;&gt;Configure git for deployment&lt;/h3&gt;

&lt;p&gt;This command sill set up you app to be deployed using git. The response you get from this command will be a git url you can use as the git remote to deploy.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az webapp deployment source config-local-git --name &amp;lt;app-name&amp;gt; --resource-group &amp;lt;my-resource-group&amp;gt; --query url --output tsv
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configure-startup-script&quot;&gt;Configure startup script&lt;/h3&gt;

&lt;p&gt;If you are coding in ES6 you probably have a build step. For that you may want to set up a custom deploy script. [Here is the documentation for how to do that](&lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script&quot; title=&quot;https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script&quot;&gt;https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However I’ve noticed a bug here. Sometimes the order of commands in the deploy script appears to not be honored. According to [this github issue](&lt;a href=&quot;https://github.com/projectkudu/kudu/issues/2699&quot; title=&quot;https://github.com/projectkudu/kudu/issues/2699&quot;&gt;https://github.com/projectkudu/kudu/issues/2699&lt;/a&gt;), it may be related to the Always On setting in your app. But regardless the app tries to start up before the my deploy script is finished, which means it tries to run code that isnt built from webpacker yet.&lt;/p&gt;

&lt;p&gt;So, in an effort to find a quick fix I just committed my built files which sucks. I’m still trying to figure out a better workaround here because there hasn’t been a lot of movement on that particular github issue.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate>
        <link>/posts/deploying-a-node-js-app-on-azure-app-services</link>
        <guid isPermaLink="true">/posts/deploying-a-node-js-app-on-azure-app-services</guid>
        
        <category>node</category>
        
        <category>azure</category>
        
        <category>production</category>
        
        
      </item>
    
      <item>
        <title>Serverless Back-End for React - Your Introduction to Serverless Architecture</title>
        <description>&lt;p&gt;I believe Serverless is the next big thing in web development. I discuss the what, why, and how of Serverless. Then I show you how to build a simple backend for a react app. You’ll be surprised how easy it is.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;What’s the opposite of the boy who cried wolf? The boy who cried that something amazing was coming? The boy who cried free pizza?&lt;/p&gt;

&lt;p&gt;Serverless architecture might be the free pizza equivalent of web technologies in terms of how amazing it is. It’s still very new tech, but the more I learn about it and use it, the more I am convinced that it’s the future of web development.&lt;/p&gt;

&lt;p&gt;In this post:&lt;/p&gt;

&lt;p&gt;I’m going to go over what serverless architecture is and how using it differs from working with a traditional web framework. I’ll also go over the benefits of serverless.&lt;/p&gt;

&lt;p&gt;Then, I’ll show you how you can make and deploy a simple serverless back-end for a React app using &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; (Amazons’s serverless platform).&lt;/p&gt;

&lt;p&gt;And finally, to wrap it up, I’ll go over some of the drawbacks of the serverless architecture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note: I’m going to be using Amazon’s platform for all of the examples in this post, but be aware that there are other serverless providers out there. The implementation details are going to be different depending on which one you use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;what-is-serverless&quot;&gt;What is serverless?&lt;/h2&gt;

&lt;p&gt;Okay, okay, technically the term serverless is a little misleading. The term serverless refers to FaaS or Function as a Service. We call it serverless because, although these functions still run on a server somewhere, you don’t have to pay for, set up, or maintain a server yourself.&lt;/p&gt;

&lt;p&gt;FaaS is a form of &lt;a href=&quot;https://www.avantica.net/blog/event-based-computing-aws-lambda&quot;&gt;event based computing&lt;/a&gt;. Basically, you configure functions to be triggered by specific events. These functions are executed in little (or big) containers containing all of the dependencies they need to run.&lt;/p&gt;

&lt;p&gt;Here is the cool part — these functions can be triggered by &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html&quot;&gt;all sorts of events&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are a few of the events AWS Lambda can be triggered by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon S3 Events — like when an object is added or deleted from S3.&lt;/li&gt;
  &lt;li&gt;Amazon Simple Email Service — when you receive an email.&lt;/li&gt;
  &lt;li&gt;Amazon Alexa — yes, you can trigger functions by talking to Alexa.&lt;/li&gt;
  &lt;li&gt;Amazon DynamoDB — trigger when data changes in your database.&lt;/li&gt;
  &lt;li&gt;Scheduled Events — self explanatory.&lt;/li&gt;
  &lt;li&gt;Amazon API Gateway — the Holy Grail!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amazon API Gateway! You can trigger these events using an API. Aaaaand, not only can you trigger a function with an API request, that function can send back a response! That’s a back-end!&lt;/p&gt;

&lt;p&gt;When you break down any web framework, even big ones like Rails, they all boil down each request to the execution and return value of one function. In the case of Rails, each request is mapped to one controller action, and all of the rest of the code is just helping the controller build the response.&lt;/p&gt;

&lt;p&gt;It seems a little strange at first to think about web apps in terms of individual functions, but all of the other parts of the framework are there, they are just being handled by the infastructure.&lt;/p&gt;

&lt;p&gt;A good example of this is the routing. In serverless you use a configuration file to tell the infastructure which API events to connect to which functions, so none of your actual code gets involved in the routing.&lt;/p&gt;

&lt;h2 id=&quot;why-serverless&quot;&gt;Why Serverless&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt;&lt;br /&gt;
One of the biggest benefits of serverless is cost. You only pay for the request and runtime of the function. This means no more paying for idle servers. This ends up saving some companies a lot of money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scalability&lt;/strong&gt;&lt;br /&gt;
Serverless solves most scaling problems because each function is its own little microservice that can scale automatically by the provider.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some of these other benefits are pretty subjective, but they come up frequently in discussions of serverless online.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to Market&lt;/strong&gt;&lt;br /&gt;
One claimed benefit is a faster time to market. This actually makes sense. You save a lot of time not having to worry about dev ops, and some of the things you used to have to write code for are handled by the infastructure, leaving you more time to develop the important parts of your application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decreased Software Complexity&lt;/strong&gt;&lt;br /&gt;
Of course it’s still possible to write bad, tightly coupled code in serverless, but splitting your application into distinct functions helps you write better, loosely coupled code, leading to less complex software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shorter Release Cycles&lt;/strong&gt;&lt;br /&gt;
If everything is loosely coupled, it can mean shorter release cycles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Industry Direction&lt;/strong&gt;&lt;br /&gt;
Another &lt;strong&gt;why&lt;/strong&gt; is the fact that this seems to be the way the industry is heading. For a while now, the industry has been trending hard towards bigger front-ends. As front-end frameworks like Angular and React have been doing more and more of the heavy lifting for the client, the back-ends for web apps have been shrinking. Serverless seems to be testing just how small a back-end can be.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;Here is the moment you’ve been waiting for!&lt;/p&gt;

&lt;p&gt;In preparation for this post, I built a little React app called Business Cardistry. The app lets people design colorful business cards.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://cardistry.nmajor.com&quot;&gt;Demo&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/nmajor/business-cardistry-client&quot;&gt;Source&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, I want this app to let users actually download PDFs of their business card design. To do that, I am going to need a little back-end processing. Specifically, I want one endpoint that will receive the HTML of the business card design and return a URL the user can use to download a PDF of the design.&lt;/p&gt;

&lt;p&gt;Before we begin, let’s take a moment to appreciate the fact that we are going to be sending HTML &lt;em&gt;from the client&lt;/em&gt; to the back-end. lol.&lt;/p&gt;

&lt;p&gt;Here is our roadmap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set up and create a new project&lt;/li&gt;
  &lt;li&gt;Deploy and send a test request&lt;/li&gt;
  &lt;li&gt;Set up an S3 Bucket&lt;/li&gt;
  &lt;li&gt;Code our function&lt;/li&gt;
  &lt;li&gt;Testing and final deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started…&lt;/p&gt;

&lt;h3 id=&quot;set-up-and-create-a-new-project&quot;&gt;Set up and Create a New Project&lt;/h3&gt;

&lt;p&gt;The Serverless Toolkit over at &lt;a href=&quot;https://serverless.com&quot;&gt;serverless.com&lt;/a&gt; has an amazing framework with incredible documentation, and that is what we are going to be using today.&lt;/p&gt;

&lt;p&gt;You should already have &lt;code class=&quot;highlighter-rouge&quot;&gt;node v6.5.0&lt;/code&gt; or higher installed.&lt;/p&gt;

&lt;p&gt;First, install the serverless CLI: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g serverless&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, follow &lt;a href=&quot;https://serverless.com/framework/docs/providers/aws/guide/credentials/&quot;&gt;these instructions&lt;/a&gt; to set up your AWS account and credentials.&lt;/p&gt;

&lt;p&gt;After following those instructions, you should have an Access Key ID, and a Secret Access Key, and both should be added to your shell environment under the variable names &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;. This is where the serverless CLI looks for credentials when deploying.&lt;/p&gt;

&lt;p&gt;Now that you have everything set up, let’s create our back-end by running this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;serverless create --template aws-nodejs --path business-cardistry
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This should create a new folder for us called &lt;code class=&quot;highlighter-rouge&quot;&gt;business-cardistry&lt;/code&gt;. Let’s go into that folder and have a look around.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ cd business-cardistry
$ ls -lah
total 24
drwxr-xr-x    5 nmajor  staff   160B Dec 27 13:37 .
drwxr-xr-x  110 nmajor  staff   3.4K Dec 27 13:37 ..
-rw-r--r--    1 nmajor  staff    86B Dec 27 13:37 .gitignore
-rw-r--r--    1 nmajor  staff   466B Dec 27 13:37 handler.js
-rw-r--r--    1 nmajor  staff   2.8K Dec 27 13:37 serverless.yml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, aside from &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;, we only have two files, &lt;code class=&quot;highlighter-rouge&quot;&gt;handler.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt;. Later, this file structure can grow into any structure we need to keep our code organized, but everything comes back to these two files.&lt;/p&gt;

&lt;p&gt;The best way to learn how these files work is to dive in and change them a bit to see how they work.&lt;/p&gt;

&lt;p&gt;I opened up &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; and removed all of the comments, so now we have something like this (I added some annotations):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;# serverless.yml

service: business-cardistry # Name of our service

provider:
  name: aws # AWS is our FaaS provider
  runtime: nodejs6.10 # The language our functions are using

functions:  # This is our list of functions
  hello:  # We have a function named hello
    handler: handler.hello  # references a function called hello in handler.js
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s modify our &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; function by renaming it to &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt; and connecting it to an API event. We do that by modifying our &lt;code class=&quot;highlighter-rouge&quot;&gt;functions&lt;/code&gt; section to look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;functions:
  pdf:
    handler: handler.pdf
    events:
      - http:
          path: pdf
          method: post
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, we added an &lt;code class=&quot;highlighter-rouge&quot;&gt;events&lt;/code&gt; level to our &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; section. We set the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt; and the method to &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;. This means we can trigger this event by sending a post request to &lt;em&gt;some-url-goes-here/pdf&lt;/em&gt;. It looks a lot like a routing system in a traditional web framework, but again, it’s being handled at the infrastructure level.&lt;/p&gt;

&lt;p&gt;Now, let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;handler.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;# handler.js
'use strict';

module.exports.hello = (event, context, callback) =&amp;gt; {
  const response = {
    statusCode: 200,
    body: JSON.stringify({
      message: 'Go Serverless v1.0! Your function executed successfully!',
      input: event,
    }),
  };

  callback(null, response);
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Again, let’s modify it by changing &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt;. Let’s also change the body to only return the message. Now, the file should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;'use strict';

module.exports.pdf = (event, context, callback) =&amp;gt; {
  const response = {
    statusCode: 200,
    body: JSON.stringify({
      message: 'Go Serverless v1.0! Your function executed successfully!',
    }),
  };

  callback(null, response);
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Alright, now &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; defines a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt;, which is connected to the &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt; function in &lt;code class=&quot;highlighter-rouge&quot;&gt;handler.js&lt;/code&gt;. We now should have everything we need to deploy and send a request.&lt;/p&gt;

&lt;h3 id=&quot;deploy-and-send-a-test-request&quot;&gt;Deploy and Send a Test Request&lt;/h3&gt;

&lt;p&gt;There actually isn’t any straightforward way to run your serverless script locally, so we actually need to deploy it to test it out.&lt;/p&gt;

&lt;p&gt;You can deploy it with the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;serverless deploy -s dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-s dev&lt;/code&gt; part tells it to set the stage to dev. The stage is how we differentiate production code from development code. We will deploy it to the production stage when everything is working.&lt;/p&gt;

&lt;p&gt;You should see something like this when you deploy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ serverless deploy -s dev
Serverless: Packaging service...
Serverless: Excluding development dependencies...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Uploading service .zip file to S3 (327 B)...
Serverless: Validating template...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
...............................
Serverless: Stack update finished...
Service Information
service: business-cardistry
stage: dev
region: us-east-1
stack: business-cardistry-dev
api keys:
  None
endpoints:
  POST - https://o20pczjzbl.execute-api.us-east-1.amazonaws.com/dev/pdf
functions:
  pdf: business-cardistry-dev-pdf
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There is the URL for our endpoint. Let’s try it out!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ curl -X POST https://o20pczjzbl.execute-api.us-east-1.amazonaws.com/dev/pdf
{&quot;message&quot;:&quot;Go Serverless v1.0! Your function executed successfully!&quot;}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It works! I’m still blown away by how easy that is.&lt;/p&gt;

&lt;h3 id=&quot;set-up-an-s3-bucket&quot;&gt;Set Up an S3 Bucket&lt;/h3&gt;

&lt;p&gt;Because we are going to be sending back a link that the user can use to download their business card, we need to upload the PDFs to S3. Let’s quickly set up an S3 bucket with the proper permissions.&lt;/p&gt;

&lt;p&gt;First, let’s talk about permissions. Lambdas have an execution role that they assume when they run. The permissions the execution role has will determine which AWS services (like S3) our Lambda function can access.&lt;/p&gt;

&lt;p&gt;By default, every new Lambda function gets its own new role, we need to first get the Role ARN of the new role that was created for our function. The Role ARN is the ID of the role that we will use to give that role access to S3.&lt;/p&gt;

&lt;p&gt;Later, when we deploy a production function, we will change the execution role of the production function to match dev role which will give the production function the same access that the dev function has.&lt;/p&gt;

&lt;p&gt;But first, we need that Role ARN.&lt;/p&gt;

&lt;p&gt;Log in to your AWS console and go to the Lambda service.&lt;/p&gt;

&lt;p&gt;You should see our function on the list. Go ahead and click it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.filestackcontent.com/HjebSOAcRXqJCPhLBkmo&quot; alt=&quot;skitch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the section that says “Execution Role” and you should see the role that is currently selected. Don’t change it — we just needed to see the name of the role.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.filestackcontent.com/C5ZeY2CVTzGROwYIuVnQ&quot; alt=&quot;skitch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, get the Role ARN by going to the IAM service in the AWS console, click on “Roles” in the sidebar, and select the role for the function. You should see the “Role ARN” at the top of the role page.&lt;/p&gt;

&lt;p&gt;Or, if you have the AWS CLI installed, you can get the Role ARN by running this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;aws iam get-role --role-name name-of-role
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The Role ARN should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arn:aws:iam::525814828111:role/business-cardistry-dev-us-east-1-lambdaRole&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, go to the S3 service.&lt;/p&gt;

&lt;p&gt;Click “Create Bucket.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.filestackcontent.com/nJLo9YqTFmVxKwzAlIrA&quot; alt=&quot;skitch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give the bucket a name but leave everything else at its default value by clicking “Next,” “Next,” “Next,” “Create Bucket.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.filestackcontent.com/3PGjDW4tTFedF6jGQQQM&quot; alt=&quot;skitch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, click on your newly created bucket.&lt;/p&gt;

&lt;p&gt;Select the Permissions tab, then Bucket Policy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.filestackcontent.com/tMCgzh96Tv2Y6TsODsZv&quot; alt=&quot;skitch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paste this into the editor. Be sure to replace &lt;em&gt;role-goes-here&lt;/em&gt; with the Role ARN.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AllowPutForAllS3TestfilesLambda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;AWS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;role-goes-here&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::business-cardistry/*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Alright, this policy allows our custom role to perform all S3 actions on our new S3 bucket. S3 should be good to go!&lt;/p&gt;

&lt;h3 id=&quot;code-our-function&quot;&gt;Code Our Function&lt;/h3&gt;

&lt;p&gt;Okay, now we can get to coding. Let’s make our &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt; function. It needs to receive some HTML, process it into a PDF file buffer, then then upload that buffer to S3.&lt;/p&gt;

&lt;p&gt;Let’s initialize npm and add some dependencies.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ npm init -y
$ npm install --save html-pdf aws-sdk shortid
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;html-pdf&lt;/code&gt; library we are using requires the program &lt;code class=&quot;highlighter-rouge&quot;&gt;phantomjs&lt;/code&gt; to be available as an executable binary. Normally, if we were running this script on a server, we would just install &lt;code class=&quot;highlighter-rouge&quot;&gt;phantomjs&lt;/code&gt; on the server. Because this is serverless, we need to make sure that the runtime context has access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;phantomjs&lt;/code&gt; executable binary.&lt;/p&gt;

&lt;p&gt;The way I handled this was to &lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;download the binary&lt;/a&gt; and put it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; folder in the project root.&lt;/p&gt;

&lt;p&gt;Then, I made sure to add this to the serverless.yml file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;package:
  include:
    - bin/phantomjs
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, when the function is deployed, it grabs that binary and uploads it while preserving its permissions and making it available in the runtime environment of the function.&lt;/p&gt;

&lt;p&gt;Okay. Let’s get to the code. Here is what my &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt; function looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;'use strict';

const pdf = require('html-pdf');
const path = require('path');
const AWS = require('aws-sdk');
const shortid = require('shortid');

module.exports.pdf = (event, context, callback) =&amp;gt; {
  const html = event.body;
  pdf.create(html, {
    height: '200px',
    width: '350px',
    phantomPath: path.resolve(process.env.LAMBDA_TASK_ROOT, 'bin/phantomjs'),
  }).toBuffer((err, buffer) =&amp;gt; {
    if (err) return console.log(err);

    const fileKey = `cards/${shortid.generate()}.pdf`;
    const bucket = 'business-cardistry';

    const s3 = new AWS.S3();
    s3.putObject({
      Bucket: bucket,
      Key: fileKey,
      Body: buffer,
      ACL: 'public-read'
    },function (resp) {
      const fileUrl = s3.getSignedUrl('getObject', {
        Bucket: bucket,
        Key: fileKey,
        Expires: 60,
      });

      callback(null, {
        statusCode: 200,
        headers: {
          'Content-Type' : 'application/json',
          'Access-Control-Allow-Origin' : '*',
        },
        body: JSON.stringify({ fileUrl }),
      });
    });
  });
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I’m not going to go into the code too deeply, but it takes the body of the request and uses it to generate a PDF buffer. It then uploads the buffer to S3 and returns a signed URL for the uploaded object.&lt;/p&gt;

&lt;p&gt;You see the line that says &lt;code class=&quot;highlighter-rouge&quot;&gt;path.resolve(process.env.LAMBDA_TASK_ROOT, 'bin/phantomjs')&lt;/code&gt;? This is how we reference that phantomjs executable binary.&lt;/p&gt;

&lt;p&gt;You’ll notice that we don’t need to specify any AWS credentials. It automatically gets the credentials from the execution role.&lt;/p&gt;

&lt;h3 id=&quot;testing-and-final-deployment&quot;&gt;Testing and Final Deployment&lt;/h3&gt;

&lt;p&gt;Since this endpoint simply receives HTML and returns a filepath, we should still be able to test it with a curl command. First, let’s deploy to dev again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;serverless deploy -s dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The above deploy command will deploy the whole project. To deploy only one function, you can use the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;serverless deploy function -f pdf -s dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If you run into any errors, you can check the logs for the &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt; function with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;logs -f pdf -s dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we can test it by sending another curl request with a string of HTML&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ curl -d '&amp;lt;h1&amp;gt;Hello PDF!&amp;lt;/h1&amp;gt;' -X POST https://o20pczjzbl.execute-api.us-east-1.amazonaws.com/dev/pdf
{&quot;fileUrl&quot;:&quot;https://business-cardis...j2hJHSBQ%3D%3D&quot;}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It works! When I paste in the fileUrl link into a browser, it downloads a PDF that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.filestackcontent.com/VKbRNpBATGGvLVGmV9W7&quot; alt=&quot;SJ5Orpb7M-1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which is exactly what we expect.&lt;/p&gt;

&lt;p&gt;So now, let’s deploy in production!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ serverless deploy -s production
Serverless: Packaging service...
Serverless: Excluding development dependencies...
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
.....
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Uploading service .zip file to S3 (35.56 MB)...
Serverless: Validating template...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
..............................
Serverless: Stack update finished...
Service Information
service: business-cardistry
stage: production
region: us-east-1
stack: business-cardistry-production
api keys:
  None
endpoints:
  POST - https://8103v1xvqk.execute-api.us-east-1.amazonaws.com/production/pdf
functions:
  pdf: business-cardistry-production-pdf
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, this created a whole new function in Lambda, so remember all of that talk about execution roles? We need to change the execution role of the production function to match the role of the dev function. That way the production function will have access to S3 as well..&lt;/p&gt;

&lt;p&gt;So go back to the Lambda page in AWS, click on the new production function that was just created, and change the Execution Role to the dev role:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.filestackcontent.com/xji2HYMZQySyeb74aIL7&quot; alt=&quot;skitch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once that’s done, we can double check the production endpoint.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ curl -d '&amp;lt;h1&amp;gt;Hello PDF!&amp;lt;/h1&amp;gt;' -X POST https://8103v1xvqk.execute-api.us-east-1.amazonaws.com/production/pdf
{&quot;fileUrl&quot;:&quot;https://business-cardis...j2hJHSBQ%3D%3D&quot;}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Aaaaaand it works! Now after modifying the request URL in my React code, my app is complete!&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href=&quot;http://cardistry.nmajor.com/&quot;&gt;cardistry.nmajor.com&lt;/a&gt; to see it in action.&lt;/p&gt;

&lt;p&gt;I know this was just a simple example with one endpoint, but this same process could be used to build dozens of endpoints for almost any app. I hope this gives you a good idea of what’s possible with serverless, and how easy and powerful it can be!&lt;/p&gt;

&lt;h2 id=&quot;limitations-and-drawbacks-of-serverless&quot;&gt;Limitations and Drawbacks of Serverless&lt;/h2&gt;

&lt;p&gt;As awesome as serverless is, there are some limitations and drawbacks:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Latency&lt;/strong&gt;&lt;br /&gt;
Although AWS Lambda is designed to execute functions in milliseconds, you do have some added latency when using serverless. However, we are talking about a few hundred added milliseconds. For most web applications, it’s not going to be an issue, but if latency is really important for your project, it’s something you are going to want to consider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vendor Lock-in&lt;/strong&gt;
Because serverless relies so heavily on the infrastructure and the supporting services, but you may need to re-write large parts of your application to move it to a different provider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black Box&lt;/strong&gt;&lt;br /&gt;
Many of the parts of your application are out of your control, so when things go wrong or if you hit an edge use-case with your app, you have little control over your ability to resolve it yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Tech&lt;/strong&gt;&lt;br /&gt;
Serverless is still in its infancy, so, as with any new technology, great care should be used when deciding whether or not to jump on the bandwagon early.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I believe serverless is the next big thing in web development. So much in web development is the same. Every framework solves many of the same problems in the same way. Serverless is solving those problems at the infrastructural level, leaving you free to work on the important and different parts of your App.&lt;/p&gt;

&lt;p&gt;Combine that with cost and scalability benefits, and the fact that there are so many amazing front-end frameworks like React, and the days of traditional back-end frameworks are numbered.&lt;/p&gt;

&lt;h2 id=&quot;other-resources&quot;&gt;Other Resources:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless-stack.com/&quot;&gt;serverless-stack.com&lt;/a&gt; — A comprehensive tutorial on building and deploying full-stack apps using Serverless and React on AWS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless.com/&quot;&gt;serverless.com&lt;/a&gt; — Great documentation, community, and other resources.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
        <link>/posts/serverless-back-end-for-react-your-introduction-to-serverless-architecture</link>
        <guid isPermaLink="true">/posts/serverless-back-end-for-react-your-introduction-to-serverless-architecture</guid>
        
        <category>serverless</category>
        
        <category>react</category>
        
        <category>aws</category>
        
        
      </item>
    
  </channel>
</rss>
