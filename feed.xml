<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NMajor Blog</title>
    <description>A blog filled with adventures in tech</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 25 Aug 2018 19:10:24 +0100</pubDate>
    <lastBuildDate>Sat, 25 Aug 2018 19:10:24 +0100</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Robust Serverless API Boilerplate with ES6, Folder Structure, Testing (Mocha + Chai), and ESLint</title>
        <description>&lt;p&gt;As a Rails developer turned Javascript Zealot, I sometimes miss the structure and opinions of the Ruby on Rails world. Its amazing how bare bones many javascript libraries are. They are so modular and self contained (good things) that, unless you take the time to add some structure and organization to your code, its easy for your project to feel chaotic an unorganized. So I’m always looking for and trying to find good patterns and structure to follow with my javascript projects.&lt;/p&gt;

&lt;p&gt;The serverless framework is a good example of this. Its so minimal in its setup that it may be difficult to know where to start to give it some structure. So here I’ll share with you one possible way to structure a serverless API project.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;Basically before I start any serious project I like to have a few things setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ES6/ES7 Webpack and Babel (From Starter)&lt;/li&gt;
  &lt;li&gt;A good offline dev workflow (From Starter)&lt;/li&gt;
  &lt;li&gt;ESLint&lt;/li&gt;
  &lt;li&gt;Folder structure&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this isnt too obscure of a topic, but I’m not actually going to cover how to build a CRUD API, this is just an example starting boilerplate before you begin coding your project.&lt;/p&gt;

&lt;p&gt;I’m assuming you’ve at least tried using the serverless framework before. If you are new to serverless, I have an article that breaks it down from the beginning here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/posts/serverless-back-end-for-react-your-introduction-to-serverless-architecture&quot; title=&quot;/posts/serverless-back-end-for-react-your-introduction-to-serverless-architecture&quot;&gt;Serverless Back-End for React - Your Introduction to Serverless Architecture&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-starter&quot;&gt;The Starter&lt;/h3&gt;

&lt;p&gt;Lets start with the great &lt;a href=&quot;https://serverless-stack.com/chapters/serverless-nodejs-starter.html&quot; title=&quot;https://serverless-stack.com/chapters/serverless-nodejs-starter.html&quot;&gt;Serverless Node.js Starter&lt;/a&gt; (&lt;a href=&quot;https://github.com/AnomalyInnovations/serverless-nodejs-starter&quot; title=&quot;https://github.com/AnomalyInnovations/serverless-nodejs-starter&quot;&gt;github&lt;/a&gt;) from the awesome &lt;a href=&quot;https://serverless-stack.com/&quot; title=&quot;https://serverless-stack.com/&quot;&gt;Serverless Stack&lt;/a&gt; project. If you’re not familiar with that project be sure to check it out.&lt;/p&gt;

&lt;p&gt;The starter basically includes all this stuff (From the the &lt;a href=&quot;https://serverless-stack.com/chapters/serverless-nodejs-starter.html&quot; title=&quot;https://serverless-stack.com/chapters/serverless-nodejs-starter.html&quot;&gt;starter description page&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Use ES7 syntax in your handler functions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Package your functions using Webpack&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Run API Gateway locally&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless offline start&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Support for unit tests&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm test&lt;/code&gt; to run your tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sourcemaps for proper error messages&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Error message show the correct line numbers&lt;/li&gt;
      &lt;li&gt;Works in production with CloudWatch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automatic support for multiple handler files&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;No need to add a new entry to your &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Add environment variables for your stages&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you dont use this starter, you have to add a lot of this stuff one by one by including and configuring the right packages and plugins. So this gives us a great place to start.&lt;/p&gt;

&lt;h3 id=&quot;create-a-new-project&quot;&gt;Create a New Project&lt;/h3&gt;

&lt;p&gt;First make sure you have the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless&lt;/code&gt; module installed globally&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn global add serverless
# or
npm install serverless -g
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And then run this command to create a new serverless project using the starter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ serverless install --url https://github.com/AnomalyInnovations/serverless-nodejs-starter --name my-project
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It gives us a &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; file that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;service: my-project

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And a handler.js file that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export const hello = async (event, context, callback) =&amp;gt; {
  const response = {
    statusCode: 200,
    body: JSON.stringify({
      message: `Go Serverless v1.0! ${(await message({ time: 1, copy: 'Your function executed successfully!'}))}`,
    }),
  };

  callback(null, response);
};

const message = ({ time, ...rest }) =&amp;gt; new Promise((resolve, reject) =&amp;gt; 
  setTimeout(() =&amp;gt; {
    resolve(`${rest.copy} (with a delay)`);
  }, time * 1000)
);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It also gives us a test folder with an example test.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;# tests/handler.test.js

import * as handler from '../handler';

test('hello', async () =&amp;gt; {
  const event = 'event';
  const context = 'context';
  const callback = (error, response) =&amp;gt; {
    expect(response.statusCode).toEqual(200);
    expect(typeof response.body).toBe(&quot;string&quot;);
  };

  await handler.hello(event, context, callback);
});
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can run this command to start the offline server for a good development workflow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;serverless offline start
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-eslint&quot;&gt;Add ESLint&lt;/h3&gt;

&lt;p&gt;I always work with a linter these days, there’s no better way to keep clean code and enforce best practices with a language like javascript where its so easy to write messy and ugly code.&lt;/p&gt;

&lt;p&gt;Lets add &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint&lt;/code&gt; and some plugins:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn add --dev eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-mocha eslint-plugin-promise
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And then make a new &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc.json&lt;/code&gt; file in the root of our project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;touch .eslintrc.json
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And add this to the new file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb/base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plugin:promise/recommended&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;promise&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintignore&lt;/code&gt; file:.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;touch .eslintignore
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And ignore the webpack config:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;# .eslintignore

webpack.config.js
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And then add a &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; script to our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;  &quot;scripts&quot;: {
    &quot;lint&quot;: &quot;node_modules/.bin/eslint .&quot;
  },
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then you can run the linter with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn lint
# or 
npm run lint
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;api-folder-structure&quot;&gt;API Folder Structure&lt;/h3&gt;

&lt;p&gt;When I’m building a serverless api I like to give my functions, paths, and folder a api-like structure. So I’ll create some directories to organize my handlers. This may be a bit overkill for small projects, but I dont think there are any downsides of having this kind of extra organization right off the bat.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;mkdir -p handlers/api/v1/todos
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I think you can think of these handlers as controllers, and so if you’re building CRUD endpoints for a model, you can add a different file for each of the 5 main API actions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;touch handlers/api/v1/todos/index.js
touch handlers/api/v1/todos/show.js
touch handlers/api/v1/todos/create.js
touch handlers/api/v1/todos/update.js
touch handlers/api/v1/todos/delete.js
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then the functions part of your &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; file would look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;functions:
  api/v1/todos/index:
    handler: handlers/api/v1/todos/index
    events:
      - http:
          path: api/v1/todos
          method: get
  api/v1/todos/show:
    handler: handlers/api/v1/todos/show
    events:
      - http:
          path: api/v1/todos/{id}
          method: get
  api/v1/todos/create:
    handler: handlers/api/v1/todos/create
    events:
      - http:
          path: api/v1/todos
          method: post
  api/v1/todos/update:
    handler: handlers/api/v1/todos/update
    events:
      - http:
          path: api/v1/todos/{id}
          method: put
  api/v1/todos/delete:
    handler: handlers/api/v1/todos/delete
    events:
      - http:
          path: api/v1/todos/{id}
          method: delete
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see this is a pretty typical REST setup.&lt;/p&gt;

&lt;p&gt;We can now remove our original handler.js file since we dont need it anymore:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;rm handler.js
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We wont be using this today, but lets also create a &lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt; folder where I can put our models:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;mkdir models
touch models/todo.js
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then the individual handlers will include the models to handle the crud operations.&lt;/p&gt;

&lt;p&gt;Now I’m going to add a basic handler for &lt;code class=&quot;highlighter-rouge&quot;&gt;todos/index.js&lt;/code&gt; so we have something to test:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;# handlers/api/v1/index.js

export default (event, context, callback) =&amp;gt; {
  const response = {
    statusCode: 200,
    body: JSON.stringify({
      message: 'Hello from todos/index',
    }),
  };

  callback(null, response);
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;setup-testing&quot;&gt;Setup Testing&lt;/h3&gt;

&lt;p&gt;By default the starter comes with &lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt; but I prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;mocha&lt;/code&gt; so lets swap &lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;mocha&lt;/code&gt; and add a bit of &lt;code class=&quot;highlighter-rouge&quot;&gt;chai&lt;/code&gt; for the assertions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;mv tests test
rm test/handler.test.js
yarn remove --dev jest
yarn add --dev mocha chai
touch test/test_helper.js
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now lets add some test files for our endpoints:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;mkdir -p test/api/v1/todos/
touch test/api/v1/todos/index.test.js
touch test/api/v1/todos/show.test.js
touch test/api/v1/todos/create.test.js
touch test/api/v1/todos/update.test.js
touch test/api/v1/todos/delete.test.js
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we’ll only add 1 test for now for our &lt;code class=&quot;highlighter-rouge&quot;&gt;todos/index&lt;/code&gt; handler:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import { expect } from 'chai';

import todosIndex from '../../../../handlers/api/v1/todos';

describe('Fetching list of todos', () =&amp;gt; {
  it('returns a valid response', (done) =&amp;gt; {
    const event = 'event';
    const context = 'context';
    const callback = (error, response) =&amp;gt; {
      expect(response.statusCode).to.equal(200);
      expect(typeof response.body).to.equal('string');
      expect(response.body).to.contain('Hello from todos/index');
      done();
    };

    todosIndex(event, context, callback);
  });
});
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then we can run it by first adding this script to our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;  &quot;scripts&quot;: {
    &quot;lint&quot;: &quot;node_modules/.bin/eslint .&quot;,
    &quot;test&quot;: &quot;NODE_ENV=test node_modules/.bin/mocha --recursive --require babel-core/register&quot;
  },
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We have to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;--recursive&lt;/code&gt; tag so it will find the tests in our subfolders, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;--require babel-core/register&lt;/code&gt; tag to make ES7 work with our tests.&lt;/p&gt;

&lt;p&gt;Then we can run our tests with the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn test
# or
npm test
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we also need a different &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc.json&lt;/code&gt; file for our testing so if we put a new one in our test tile the tests will play by different eslint rules.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;touch test/.eslintrc.json
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With these contents so it will ignore mocha keywords:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb/base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plugin:promise/recommended&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;promise&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;wrap-it-up&quot;&gt;Wrap it up&lt;/h3&gt;

&lt;p&gt;Now we can start our offline server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;serverless offline start
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can test our code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn test
# or
npm test
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;…and we can lint our code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn lint
# or
npm run lint
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we have some good folder structure to start building our API.&lt;/p&gt;

&lt;p&gt;Thanks for reading, I hope this can be of help to someone.&lt;/p&gt;

&lt;p&gt;As always if you notice anything I did that could be improved, please reach out. I’m always looking to improve.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Aug 2018 01:00:00 +0100</pubDate>
        <link>/posts/serverless-my-initial-setup-with-es6-testing-and-ci-deployment</link>
        <guid isPermaLink="true">/posts/serverless-my-initial-setup-with-es6-testing-and-ci-deployment</guid>
        
        <category>serverless</category>
        
        <category>eslint</category>
        
        <category>javascript</category>
        
        <category>es6</category>
        
        
      </item>
    
      <item>
        <title>Access Token Handling (Automatic Refresh) with React + Redux</title>
        <description>&lt;p&gt;The industry trend of decoupling backends and frontends has lots of advantages. You could argue that its just good software design. Plus it makes it much easier to have multiple front-end clients using the same backend. And since mobile apps dont use cookies, then it makes sense to convert the entire authentication system to some kind of token based solution.&lt;/p&gt;

&lt;p&gt;But the next questions is how can you safely and convienently store and manage these tokens in your React+Redux app.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;Here is the approach I’ve used recently and it seems to work out pretty well. Its very similar to the approach I found &lt;a href=&quot;https://michaelwashburnjr.com/best-way-to-store-tokens-redux/&quot; title=&quot;https://michaelwashburnjr.com/best-way-to-store-tokens-redux/&quot;&gt;here&lt;/a&gt;. In this example I’m dealing with accessToken + refreshToken, but this could easily be adapted to different kinds of tokens (a JWT auth for example).&lt;/p&gt;

&lt;h3 id=&quot;break-it-down&quot;&gt;Break it down&lt;/h3&gt;

&lt;p&gt;First we’ll make sure that redux has gets the token. In my case this means passing it from the server after the authentication callback.&lt;/p&gt;

&lt;p&gt;Then we will use a simple redux subscriber to store our auth tokens in the browser localStorage. Using a subscriber will keep it synced so that anytime the auth token in the redux state changes it updates it in the localStorage.&lt;/p&gt;

&lt;p&gt;Then we’ll make sure that anytime we refresh the page, we load in the auth tokens from localStorage when creating the store.&lt;/p&gt;

&lt;p&gt;Then we’ll add some middleware that happens before each outgoing HTTP request that will refresh the token if needed, and update the redux state with the new tokens, and our subscriber will automatically update the token in localStorage.&lt;/p&gt;

&lt;h3 id=&quot;get-the-token-from-the-server-to-redux&quot;&gt;Get the Token from the Server to Redux&lt;/h3&gt;

&lt;p&gt;You can probably skip this part if you are already getting your auth tokens to redux some other way.&lt;/p&gt;

&lt;p&gt;In my case, I’m authenticating with Microsofts Oauth2 service. and the tokens are being sent to the server via a RedirectURI callback, that means I need to pass the tokens from the server to the client. I don’t store it in the session or database, Instead I pass it back to the client using the &lt;code class=&quot;highlighter-rouge&quot;&gt;window.__PRELOADED_STATE__&lt;/code&gt; demonstrated in the &lt;a href=&quot;https://redux.js.org/recipes/serverrendering&quot;&gt;Redux server rendering documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve decided to store my auth tokens in redux under &lt;code class=&quot;highlighter-rouge&quot;&gt;state.auth.tokens&lt;/code&gt;, so my preloadedState object will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const preloadedState = {
  auth: {
    tokens: { /* Auth token data goes here */ }
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then we set that as the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;window.__PRELOADED_STATE__&lt;/code&gt;, in the server rendered html like this (Making sure to include these lines BEFORE loading in the client js bundle):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&amp;lt;script&amp;gt;
  window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(/&amp;lt;/g, '\\u003c')}
  
  /* The string replace is to prevent injections into our preloaded state. Check the redux server rendering docs for more info */
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then when loading the store, load in the &lt;code class=&quot;highlighter-rouge&quot;&gt;window.__PRELOADED_STATE__&lt;/code&gt; as the initial state when creating the redux store:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const store = createStore(reducer, window.__PRELOADED_STATE__)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sync-auth-state-to-localstorage&quot;&gt;Sync Auth State to localStorage&lt;/h3&gt;

&lt;p&gt;Thanks again to &lt;a href=&quot;https://michaelwashburnjr.com/best-way-to-store-tokens-redux/&quot;&gt;this post&lt;/a&gt; for the idea of using a simple redux store subscriber to keep localStorage synced with out auth section of the redux store.&lt;/p&gt;

&lt;p&gt;I made a function that will serialize and set the localStorage variables, and then call that function from &lt;code class=&quot;highlighter-rouge&quot;&gt;store.subscribe&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;function setAuthState(state) {
  try {
    localStorage.setItem('state.auth.tokens', JSON.stringify((state.auth || {}).tokens));
  } catch (err) { return undefined; }
}

store.subscribe(() =&amp;gt; {
  setAuthState(store.getState())
});
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Be sure to checkout the &lt;a href=&quot;https://redux.js.org/api/store#subscribe&quot;&gt;documentation for store.subscribe&lt;/a&gt;. You can also checkout &lt;a href=&quot;https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage&quot;&gt;this video&lt;/a&gt; by Dan Abramov on how to use subscribe to store the state into localStorage.&lt;/p&gt;

&lt;p&gt;Some other libraries for watching the state for mutations are &lt;a href=&quot;https://github.com/jprichardson/redux-watch&quot;&gt;redux-watch&lt;/a&gt; and &lt;a href=&quot;https://github.com/ashaffer/redux-subscribe&quot;&gt;redux-subscribe&lt;/a&gt;. They may be a better option later, but for now I’m going with this simple subscribe approach.&lt;/p&gt;

&lt;h3 id=&quot;load-auth-from-localstorage-on-refresh&quot;&gt;Load Auth From localStorage on Refresh&lt;/h3&gt;

&lt;p&gt;Then I made a function to get and deserialize the state from localStorage:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;function getAuthState() {
  try {
    const tokens = JSON.parse(localStorage.getItem('state.auth.tokens')) || undefined;
    const user = JSON.parse(localStorage.getItem('state.auth.user')) || undefined;

    return { auth: { tokens, user } }
  } catch (err) { return undefined; }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then change our create store to something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const store = createStore(
  reducer,
  { ...getAuthState(), ...window.__PRELOADED_STATE__ }
 )
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And I was able to refresh the page and the auth tokens persist. So it works!&lt;/p&gt;

&lt;h3 id=&quot;automatic-token-refreshing&quot;&gt;Automatic Token Refreshing&lt;/h3&gt;

&lt;p&gt;I debated whether or not to include this part, because there’s so many different ways to implement it, but the ways I think are truly nice and elegant can be a bit complex for a blog post. But I’ll try anyway. Hopefully people can get a few good ideas from this.&lt;/p&gt;

&lt;p&gt;Now this step is going to vary a lot depending on your implementation. I was greatly inspired by &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;this library (erikras/react-redux-universal-hot-example)&lt;/a&gt; which has a really nice middleware setup for making API requests by dispatching redux actions.&lt;/p&gt;

&lt;p&gt;Although my final implementation looks much more like that the middleware found in the &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;erikras/react-redux-universal-hot-example&lt;/a&gt; mentioned above, here is an exmample of how you might do a simplified version of some API request middleware with the refresh token.&lt;/p&gt;

&lt;p&gt;I’m assuming you are using a function dispatcher middleware like &lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; and &lt;a href=&quot;https://github.com/visionmedia/superagent&quot;&gt;superagent&lt;/a&gt; as the request library.&lt;/p&gt;

&lt;p&gt;You’ll also notice that I loaded my tokens with an &lt;code class=&quot;highlighter-rouge&quot;&gt;expires_at&lt;/code&gt; attribute to help calculate when a refresh is needed.&lt;/p&gt;

&lt;p&gt;The middleware is in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;requestMiddleware.js&lt;/code&gt; and looks something like this like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export default function requestMiddleware() {
  return ({ dispatch, getState }) =&amp;gt; next =&amp;gt; (action) =&amp;gt; {
    const {
      request,
    } = action;

    if (!request) {
      return next(action);
    }

    const { tokens } = getState().auth;

    // 5 minutes from now
    const refreshThreshold = (new Date.getTime() + 300000);

    if (tokens.refresh_token &amp;amp;&amp;amp; refreshThreshold &amp;gt; tokens.expires_at) {
      return superagent.post('/path/to/renew')
        .send({ refresh_token: tokens.refresh_token })
        .end((err, { body } = {}) =&amp;gt; {
          dispatch({ type: 'SET_TOKENS', payload: body });
          request(body);
        });
    }
    return request(tokens);
  };
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Dont forget to apply the middleware:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import { createStore, applyMiddleware } from 'redux';
import requestMiddleware from './middleware/requestMiddleware';
import rootReducer from './reducers/index';

const store = createStore(
  rootReducer,
  applyMiddleware(requestMiddleware())
);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Add a reducer to capture the &lt;code class=&quot;highlighter-rouge&quot;&gt;SET_TOKEN&lt;/code&gt; action:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export default function reducer(state = initialState, action = {}) {
  switch (action.type) {
    case SET_TOKENS:
      return {
        ...state,
        auth: { tokens: action.payload },
      };
    default:
      return state;
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And now we can dispatch actions like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export default function sendAnyRequest() {
  return (dispatch) =&amp;gt; {
    return {
      request: (tokens) =&amp;gt; superagent.post('/some/random/request')
        .send({ foo: 'bar' })
        .end((err, { body } = {}) =&amp;gt; {
          dispatch({ type: 'SOME_EVENT', payload: body });
        });
    }
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;wrap-it-up&quot;&gt;Wrap it up&lt;/h3&gt;

&lt;p&gt;And before making any request it will first check the validity of the refresh token and refresh it if needed. And if a refresh does occur it will set the new token in the redux store, which will be automatically written to the localStorage by the subscriber.&lt;/p&gt;

&lt;p&gt;Noice!&lt;/p&gt;

&lt;p&gt;I highly recommend you read through the code of this project &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;erikras/react-redux-universal-hot-example&lt;/a&gt;, specifically the &lt;code class=&quot;highlighter-rouge&quot;&gt;ApiClient.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;clientMiddleware.js&lt;/code&gt;, and see how the request actions are dispatched.&lt;/p&gt;

&lt;p&gt;As I said, I used that example heavily when setting up my redux store. Here is what my middleware file looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import { SIGN_OUT, SET_TOKENS } from '../modules/auth';
const refreshThreshold = (new Date().getTime() + 300000); // 5 minutes from now

export default function clientMiddleware(client) {
  return ({ dispatch, getState }) =&amp;gt; next =&amp;gt; (action) =&amp;gt; {
    if (typeof action === 'function') {
      return action(dispatch, getState);
    }

    const {
      promise, types, ...rest
    } = action;
    if (!promise) {
      return next(action);
    }

    // eslint-disable-next-line no-param-reassign
    client.token = (getState().auth.tokens || {}).access_token;

    const [REQUEST, SUCCESS, FAILURE] = types;
    next({ ...rest, type: REQUEST });

    let actionPromise = Promise.resolve();
    const { tokens } = getState().auth;

    if (tokens.refresh_token &amp;amp;&amp;amp; refreshThreshold &amp;gt; tokens.expires_at) {
      actionPromise = client.post('/my-server/renew', { data: { refresh_token: tokens.refresh_token } })
        .then(
          (result) =&amp;gt; {
            client.token = result.access_token;
            return next({
              ...rest, result, type: SET_TOKENS,
            });
          },
          errors =&amp;gt; next({
            ...rest, errors, type: SIGN_OUT,
          }),
        )
        .then(() =&amp;gt; promise(client));
    } else {
      actionPromise = promise(client);
    }

    actionPromise.then(
      result =&amp;gt; next({ ...rest, result, type: SUCCESS }),
      errors =&amp;gt; next({ ...rest, errors, type: FAILURE }),
    ).catch((error) =&amp;gt; {
      console.error('MIDDLEWARE ERROR:', error);
      next({ ...rest, error, type: FAILURE });
    });

    return actionPromise;
  };
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And I can dispatch really clean actions that look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export function loadOne(_id) {
  return {
    types: [LOAD, LOAD_SUCCESS, LOAD_FAIL],
    promise: client =&amp;gt; client.get('/items/'),
  };
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And the tokens are automatically refreshed and persisted.&lt;/p&gt;

&lt;p&gt;I still have some cleaning up to do with my setup. I’d like to modularize that refresh token bit. I first tried to put it into its own middleware, but the existing client middleware dispatches an initial action (LOAD in the example above) that triggers the loading state and adds spinners. Having the refresh token part in its own middleware delayed the loading state until after the refresh so it made for a bad user experience.&lt;/p&gt;

&lt;p&gt;It seems to be pretty functional and reliable so far. I’ll be sure to update this article if I discover any problems or brittleness with this implementation.&lt;/p&gt;

&lt;p&gt;If you notice any mistakes in here, or if you have any ideas on how to improve this setup, please let me know in the comments. I’m always looking for better patterns to follow.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Aug 2018 01:00:00 +0100</pubDate>
        <link>/posts/access-and-refresh-token-handling-with-redux</link>
        <guid isPermaLink="true">/posts/access-and-refresh-token-handling-with-redux</guid>
        
        <category>react</category>
        
        <category>redux</category>
        
        <category>authentication</category>
        
        
      </item>
    
      <item>
        <title>Node Env Variables - dotenv Workaround</title>
        <description>&lt;p&gt;The library that everyone uses to manage environmental variables in node is &lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot; title=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv&lt;/a&gt;. I don’t think I’ve ever had so much trouble with such a popular module.&lt;/p&gt;

&lt;p&gt;What I want is to have my development environment run with the one set of environment variables and my tests run with a different set of environment variables.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;The instructions say to put this line in your code as early as possible.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;require('dotenv').config()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But that didnt work for me.&lt;/p&gt;

&lt;p&gt;I think it might be a problem related to webpack. I could never get &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; to work reliably, any env variables I referenced would be &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, but then I finally found the solution in &lt;a href=&quot;https://github.com/motdotla/dotenv/issues/133#issuecomment-255298822&quot; title=&quot;https://github.com/motdotla/dotenv/issues/133#issuecomment-255298822&quot;&gt;this github issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What you have to do is create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;.env.js&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import dotenv from 'dotenv';
dotenv.config({ silent: true });
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And import it into your program as early as possible, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import {} from './env';
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;For some reason that makes it work.&lt;/p&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;

&lt;p&gt;I also had trouble using env variables in my testing environment. What I found was that the &lt;code class=&quot;highlighter-rouge&quot;&gt;test_helper.js&lt;/code&gt; file actually loads after some of my tests so I couldn’t use the trick above.&lt;/p&gt;

&lt;p&gt;What I did was create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;env.js&lt;/code&gt; file that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import dotenv from 'dotenv';
dotenv.config({ path: '.env.test' });
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;…and load it as a setup script in the mocha command like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt; NODE_ENV=test node_modules/.bin/mocha --recursive --require babel-core/register --require ./test/env.js --exit
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And thats the only way I have been able to get dotenv to work predictably. I hope this helps someone.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Aug 2018 01:00:00 +0100</pubDate>
        <link>/posts/node-env-variables-solving-the-nightmare</link>
        <guid isPermaLink="true">/posts/node-env-variables-solving-the-nightmare</guid>
        
        <category>node</category>
        
        
      </item>
    
      <item>
        <title>Using Socket.io with Redux - Websocket Redux Middleware</title>
        <description>&lt;p&gt;This article uses socket.io as the websocket library. If you want to see a version of this article using Rails’ ActionCable library, &lt;a href=&quot;/posts/making-redux-middleware-for-websockets&quot; title=&quot;/posts/making-redux-middleware-for-websockets&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Middleware is one of the most powerful and useful features of redux. If you’re unfamiliar with redux middleware, it is a way to insert extra behavior into dispatched redux actions.&lt;/p&gt;

&lt;p&gt;Today we’re going to use it to make a clean and powerful way to manage our socket.io events. Basically we want to subscribe to specific events and then dispatch specific redux actions anytime those events are broadcast to us from the socket.io server.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://redux.js.org/advanced/middleware&quot; title=&quot;https://redux.js.org/advanced/middleware&quot;&gt;redux middleware documentation here&lt;/a&gt; The code below is inspired by reading through the source of &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;this example redux app&lt;/a&gt;, specifically &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot;&gt;this middleware&lt;/a&gt;, so you may also want to check that out as well.&lt;/p&gt;

&lt;h3 id=&quot;typical-redux-actions&quot;&gt;Typical Redux Actions&lt;/h3&gt;

&lt;p&gt;Redux actions, by default, looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'MY_ACTION_TYPE'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...some_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Redux actions have 1 required attribute, &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. Anything else is just extra and is usually meant to be used by the reducer to mutate the state.&lt;/p&gt;

&lt;p&gt;By using redux middleware we can define our own action patterns and structures. The middleware will check if the action has other specific attributes and handle that action differently than the others. That way all we have to do to trigger some custom redux behavior is dispatch an action with our specific attributes and it will automatically be handled differently.&lt;/p&gt;

&lt;p&gt;Specifically we are going to create a new kind of action that will start listening for specific socket.io events and dispatch a new redux action anytime that event comes through from the server. We’ll also be able to stop listening for any specific event.&lt;/p&gt;

&lt;h3 id=&quot;middleware-function&quot;&gt;Middleware Function&lt;/h3&gt;

&lt;p&gt;First lets make a middleware function, you’ll want to export this function from a file. I called my file `socketMiddleware.js`:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import io from 'socket.io-client';

export default function socketMiddleware() {
  const socket = io();

  return ({ dispatch }) =&amp;gt; next =&amp;gt; (action) =&amp;gt; {
    if (typeof action === 'function') {
      return next(action);
    }

    const {
      event,
      leave,
      handle,
      ...rest
    } = action;

    if (!event) {
      return next(action);
    }

    if (leave) {
      socket.removeListener(event);
    }

    let handleEvent = handle;
    if (typeof handleEvent === 'string') {
      handleEvent = result =&amp;gt; dispatch({ type: handle, result, ...rest });
    }
    return socket.on(event, handleEvent);
  };
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lets break down this code:&lt;/p&gt;

&lt;p&gt;Basically we first skip our middleware if the action is a function or if there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; attribute in our action.&lt;/p&gt;

&lt;p&gt;Then if there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; attribute, then we remove the event listener&lt;/p&gt;

&lt;p&gt;Else we create a new event listener.&lt;/p&gt;

&lt;p&gt;But you will notice that we are doing some quick logic to check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; attribute is a string. And if it is, we are changing its value to a function that dispatches a new action with the received data. So basically our &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attribute can take both an action type string or an actual function. This gives us an extra level of control over how we handle the data coming in from the socket.io server.&lt;/p&gt;

&lt;p&gt;And any data that is sent from the socket.io server is included in the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; attribute of the action. So the reducer can have easy access to any data the server sent. Also any extra action attributes (&lt;code class=&quot;highlighter-rouge&quot;&gt;...rest&lt;/code&gt;) are just passed directly through to the dispatched action.&lt;/p&gt;

&lt;p&gt;Also notice that the function that we are exporting is returning another function. This is an example of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot; title=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;Higher-order function&lt;/a&gt; and is a very useful pattern in Javascript. We will execute the outside function when we apply the middleware to redux which will create the socket.io connection only once and give the inner function access to that connection going forward.&lt;/p&gt;

&lt;h3 id=&quot;add-middleware-to-redux&quot;&gt;Add Middleware to Redux&lt;/h3&gt;

&lt;p&gt;Then we have to apply our new middlware. Check the &lt;a href=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot; title=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot;&gt;redux documentation&lt;/a&gt; for how to do this. But you will probably need to do something like this when setting up your store:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import { createStore, applyMiddleware } from 'redux';
import socketMiddleware from './middleware/socketMiddleware';
import rootReducer from './reducers/index';

const store = createStore(
  rootReducer,
  applyMiddleware(socketMiddleware())
);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since other file is actually exporting a higher-order function, don’t forget to execute the socketMiddleware function when applying it to redux. This will also create the socket.io connection only once when the store loads so we don’t have to worry about creating a new connection every time.&lt;/p&gt;

&lt;h3 id=&quot;our-new-action-creators&quot;&gt;Our New Action Creators&lt;/h3&gt;

&lt;p&gt;We now have access to a new type of action that has new required attributes. If we dispatch an action with a &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; attribute it will trigger our socket middleware.&lt;/p&gt;

&lt;p&gt;Here are some example action creators using our new middleware.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export function subscribeMessages() {
  return {
    event: 'message',
    handle: NEW_MESSAGE,
  }
}

export function unsubscribeMessages() {
  return {
    event: 'message',
    leave: true,
  }
}

// Action creator with received function:
export function subscribeConversation() {
  return dispatch =&amp;gt; dispatch({
    event: 'message',
    handle: data =&amp;gt; dispatch({
      type: NEW_MESSAGE,
      payload: data.message,
    }),
  });
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You’ll notice these actions don’t even have the required &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute, this is because when they are dispatched we hijack the action and do out own thing, so these particular actions never makes it to the reducer.&lt;/p&gt;

&lt;p&gt;Instead we have an &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; attribute required to start listening for an event, and &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt;, attributes to stop listening.&lt;/p&gt;

&lt;p&gt;The important part here is that &lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; is either an action string to dispatch when new data comes in, or a function to run when new data comes in, but since that function can be another call to dispatch, we have the convenience of a useful default and the flexibility to do whatever we want.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I’m now a huge fan of redux middleware, I love how it cleans up and simplifies doing complex repetitive things in our action creators.&lt;/p&gt;

&lt;p&gt;Now we’ve set this up we can subscribe and unsubscribe to socket.io events really easily just by dispatching one of our new action creators.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Aug 2018 13:59:28 +0100</pubDate>
        <link>/posts/using-socket-io-with-redux-websocket-redux-middleware</link>
        <guid isPermaLink="true">/posts/using-socket-io-with-redux-websocket-redux-middleware</guid>
        
        <category>javascript</category>
        
        <category>react</category>
        
        <category>redux</category>
        
        <category>websockets</category>
        
        <category>socket.io</category>
        
        
      </item>
    
      <item>
        <title>Using Action Cable with Redux - Websocket Redux Middleware</title>
        <description>&lt;p&gt;This article uses ActionCable as the websocket library. If you want to see a version of this article using socket.io, &lt;a href=&quot;/posts/using-socket-io-with-redux-websocket-redux-middleware&quot; title=&quot;/posts/using-socket-io-with-redux-websocket-redux-middleware&quot;&gt;click here.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Middleware is one of the most powerful and useful features of redux. If you’re unfamiliar with redux middleware, it is a way to insert extra behavior into dispatched redux actions.&lt;/p&gt;

&lt;p&gt;Today we’re going to use it to make a clean and powerful way to manage our subscriptions to different Action Cable channels+rooms. This also means taking the data sent to use through action cable and dispatching the appropriate redux actions to mutate the state.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with redux middleware, check out the &lt;a href=&quot;https://redux.js.org/advanced/middleware&quot; title=&quot;https://redux.js.org/advanced/middleware&quot;&gt;documentation here&lt;/a&gt;. The code below is inspired by reading through the source of &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;this example redux app&lt;/a&gt;, specifically &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot; title=&quot;https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/redux/middleware/clientMiddleware.js&quot;&gt;this middleware&lt;/a&gt;, so you may also want to check that out as well.&lt;/p&gt;

&lt;h3 id=&quot;typical-redux-actions&quot;&gt;Typical Redux Actions&lt;/h3&gt;

&lt;p&gt;Basically redux action, by default, looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'MY_ACTION_TYPE'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...some_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Redux actions have 1 required attribute, &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. Anything else is just extra and is usually meant to be used by the reducer to mutate the state.&lt;/p&gt;

&lt;p&gt;By using redux middleware we can define our own action patterns and structures. The middleware will check if the action has other specific attributes and handle that action differently than the others. That way all we have to do to trigger some custom redux behavior is dispatch an action with our specific attributes and it will automatically be handled differently.&lt;/p&gt;

&lt;p&gt;Specifically we are going to create a new kind of action that will subscribe or unsubscribe to specific Action Cable channels+rooms.&lt;/p&gt;

&lt;h3 id=&quot;middleware-function&quot;&gt;Middleware Function&lt;/h3&gt;

&lt;p&gt;First lets make a middleware function, you’ll want to export this function from a file. I called my file `cableMiddleware.js`:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import ActionCable from 'actioncable';

export default function cableMiddleware() {
  const cable = ActionCable.createConsumer('/cable');

  return ({ dispatch, getState }) =&amp;gt; next =&amp;gt; (action) =&amp;gt; {
    if (typeof(action) === 'function') {
      return next(action)
    }

    const {
      channel,
      room,
      leave,
    } = action;
    let { received } = action;

    if (!channel) {
      return next(action);
    }

    if (leave) {
      const subscription = _.find(
        cable.subscriptions.subscriptions,
        sub =&amp;gt; sub.identifier === JSON.stringify({ channel, room }),
      );

      return cable.subscriptions.remove(subscription);
    }

    if (typeof(received) === 'string') {
      received = result =&amp;gt; dispatch({ type: received, result })
    }

    return cable.subscriptions.create({ channel, room }, { received });
  };
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lets break down this code:&lt;/p&gt;

&lt;p&gt;Basically we first skip our middleware if the action is a function or if there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; attribute in our action.&lt;/p&gt;

&lt;p&gt;Then if there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; attribute, then we remove the action cable subscription to the channel+room.&lt;/p&gt;

&lt;p&gt;Else we create a subscription to the channel+room.&lt;/p&gt;

&lt;p&gt;But you will notice that we are doing some quick logic to check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attribute is a string. And if it is, we are changing its value to a function that dispatches a new action with the received data. So basically our &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attribute can take both an action type string or an actual function. This gives us an extra level of control over how we handle the data coming in from Action Cable.&lt;/p&gt;

&lt;p&gt;And any data that is sent from the ActionCable server is included in the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; attribute of the action. So the reducer can have easy access to any data the server sent. Also any extra action attributes (&lt;code class=&quot;highlighter-rouge&quot;&gt;...rest&lt;/code&gt;) are just passed directly through to the dispatched action.&lt;/p&gt;

&lt;p&gt;Also notice that the function that we are exporting is returning another function. This is an example of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot; title=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;Higher-order function&lt;/a&gt; and is a very useful pattern in Javascript. We will execute the outside function when we apply the middleware to redux which will create the ActionCable connection only once and give the inner function access to that cable connection going forward.&lt;/p&gt;

&lt;h3 id=&quot;add-middleware-to-redux&quot;&gt;Add Middleware to Redux&lt;/h3&gt;

&lt;p&gt;Then we have to apply our new middlware. Check the &lt;a href=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot; title=&quot;https://redux.js.org/advanced/middleware#attempt-6-naively-applying-the-middleware&quot;&gt;redux documentation&lt;/a&gt; for how to do this. But you will probably need to do something like this when setting up your store:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import { createStore, applyMiddleware } from 'redux';
import cableMiddleware from './middleware/cableMiddleware';
import rootReducer from './reducers/index';

const store = createStore(
  rootReducer,
  applyMiddleware(cableMiddleware())
);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since other file is actually exporting a higher-order function, don’t forget to execute the cableMiddleware function when applying it to redux. This will also create the Action Cable connection only once when the store loads so we don’t have to worry about creating a new connection every time.&lt;/p&gt;

&lt;h3 id=&quot;our-new-action-creators&quot;&gt;Our New Action Creators&lt;/h3&gt;

&lt;p&gt;We now have access to a new type of action that has new required attributes. Basically if we dispatch an action with a &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; attribute it will trigger our cable middleware.&lt;/p&gt;

&lt;p&gt;Here are some example action creators using our new middleware.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;export function subscribeConversation(conversationId) {
  return {
    channel: 'conversations',
    room: `conversation_${conversationId}`,
    received: NEW_MESSAGE,
  }
}

export function unsubscribeConversation(conversationId) {
  return {
    channel: 'conversations',
    room: `conversation_${conversationId}`,
    leave: true,
  }
}

// Action creator with received function:
export function subscribeConversation(conversationId) {
  return dispatch =&amp;gt; dispatch({
    channel: 'conversations',
    room: `conversation_${conversationId}`,
    received: data =&amp;gt; dispatch({
      type: NEW_MESSAGE,
      payload: data.conversation,
    }),
  });
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You’ll notice these actions don’t even have the required &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute, this is because when they are dispatched we hijack the action and do out own thing, so these particular actions never makes it to the reducer.&lt;/p&gt;

&lt;p&gt;Instead we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;room&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; attributes required to subscribe to a channel+room, and &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;room&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt;, attributes required to unsubscribe from a channel+room.&lt;/p&gt;

&lt;p&gt;The important part here is that &lt;code class=&quot;highlighter-rouge&quot;&gt;received&lt;/code&gt; is either an action string to dispatch when new data comes in, or a function to run when new data comes in.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I’m now a huge fan of redux middleware, I love how it cleans up and simplifies doing complex repetative things in our action creators.&lt;/p&gt;

&lt;p&gt;Now we’ve set this up we can subscribe and unsubscribe to rooms and channels very easily, as well as handle the data from the server in very robust and dynamic ways.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jul 2018 01:00:00 +0100</pubDate>
        <link>/posts/making-redux-middleware-for-websockets</link>
        <guid isPermaLink="true">/posts/making-redux-middleware-for-websockets</guid>
        
        <category>redux</category>
        
        <category>javascript</category>
        
        <category>websockets</category>
        
        <category>react</category>
        
        <category>rails</category>
        
        <category>actioncable</category>
        
        
      </item>
    
      <item>
        <title>Adding ESLint to Your Project with a Git Hook</title>
        <description>&lt;p&gt;Linters can be annoying at first, but I feel like they really help me write better code. Plus they are great for working in teams to make sure everyone is following the same conventions.&lt;/p&gt;

&lt;p&gt;We’re going to walk through how to setup ESLint and add it to our project using a git pre-commit hook.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First install the package eslint:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn add eslint --only=dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then initialize init and it will walk you through a typical setup:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn eslint --init
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;These are the options I selected. I like to start with the AirBnB template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;? How would you like to configure ESLint? Use a popular style guide
? Which style guide do you want to follow? Airbnb
? Do you use React? Yes
? What format do you want your config file to be in? JSON
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The airbnb template is already set up to use react and it will install all sorts of nice dependencies for you.&lt;/p&gt;

&lt;p&gt;And thats basically it!&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;It creates a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;eslintrc.json&lt;/code&gt; (the file will be different depending on which format you chose). And in this file will be your configuration.&lt;/p&gt;

&lt;p&gt;If you open that file it will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So it is basically just copying all of airbnb’s rules. So if we want to now change the rules we are using we need to manually add them. We can turn off or change any rule and any rule we specify in our file will override the airbnb rule.&lt;/p&gt;

&lt;p&gt;Here is an example of how to disable a rule called &lt;code class=&quot;highlighter-rouge&quot;&gt;no-underscore-dangle&lt;/code&gt; and change the rule called &lt;code class=&quot;highlighter-rouge&quot;&gt;react/jsx-filename-extension&lt;/code&gt; which requires all javascript files what use jsx to have the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt;. This rule change also allows you to have &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; extension.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react/jsx-filename-extension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extensions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.jsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;no-underscore-dangle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To disable eslint totally on a specific line, you can add this at the end of the line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;var foo = &quot;bar&quot; // eslint-disable-line
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And to disable 1 rule on that line you can add the rule like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;var foo = &quot;bar&quot; // eslint-disable-line no-alert
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can also do it this way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;// eslint-disable-next-line
var foo = &quot;bar&quot;

// eslint-disable-next-line no-alert
var foo = &quot;bar&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can lint any file by running &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn eslint path/to/file.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also configure your editor to display any lint issues inline for you.&lt;/p&gt;

&lt;p&gt;You can also set up a git pre-commit script to run before each commit which will enforce the lint rules in a very strong way.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-eslint-pre-commit-git-hook&quot;&gt;Setting up a ESLint pre-commit git hook&lt;/h2&gt;

&lt;p&gt;I’m assuming you already have a git repo setup.&lt;/p&gt;

&lt;p&gt;Create a new file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;touch .git/hooks/pre-commit
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Make the file executable:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;chmod +x .git/hooks/pre-commit
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then paste in this code here into that file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;STAGED_FILES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git diff --cached --name-only --diff-filter&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ACM | grep &lt;span class=&quot;s2&quot;&gt;&quot;.jsx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0,1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ESLINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/node_modules/.bin/eslint&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$STAGED_FILES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true

printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Validating Javascript:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Check for eslint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! -x &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESLINT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[41mPlease install ESlint&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m (npm i --save-dev eslint)&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

for &lt;/span&gt;FILE &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STAGED_FILES&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESLINT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[32mESLint Passed: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[41mESLint Failed: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi
done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Javascript validation completed!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ! &lt;span class=&quot;nv&quot;&gt;$PASS&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[41mCOMMIT FAILED:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m Your commit contains files that should pass ESLint but do not. Please fix the ESLint errors and try again.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[42mCOMMIT SUCCEEDED&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This code is from [this article](&lt;a href=&quot;https://medium.com/@shettyrahul8june/how-to-run-eslint-using-pre-commit-hook-25984fbce17e&quot; title=&quot;https://medium.com/@shettyrahul8june/how-to-run-eslint-using-pre-commit-hook-25984fbce17e&quot;&gt;https://medium.com/@shettyrahul8june/how-to-run-eslint-using-pre-commit-hook-25984fbce17e&lt;/a&gt;) which references [this gist](&lt;a href=&quot;https://gist.github.com/rashtay/328da46a99a9d7c746636df1cf769675&quot; title=&quot;https://gist.github.com/rashtay/328da46a99a9d7c746636df1cf769675&quot;&gt;https://gist.github.com/rashtay/328da46a99a9d7c746636df1cf769675&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Now anytime someone commits, any javascript files included in the commit will have to pass the lint test!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jul 2018 01:00:00 +0100</pubDate>
        <link>/posts/adding-eslint-to-your-project</link>
        <guid isPermaLink="true">/posts/adding-eslint-to-your-project</guid>
        
        <category>javascript</category>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>React CSS - Styled Components</title>
        <description>&lt;h2 id=&quot;why-i-prefer-styled-components&quot;&gt;Why I prefer Styled Components&lt;/h2&gt;

&lt;p&gt;I prefer Styled Components because I feel like it is more inline with the core component philosophy of react. React is all about creating reusable components, and really pushed the idea of bundling the templating (HTML) and behavior (JS) together into components. So it always felt a bit wonky to me to still put my CSS in a separate file and connect my styling using regular CSS &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; targeting.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;Styled Components allow us to bundle the templating (HTML), behavior (JS), and styling (CSS) all together. And similar to how JSX lets us write HTML in with our Javascript, Styled Components let us write classic CSS, but it has many classic JS ways for us to manage our styling logic.&lt;/p&gt;

&lt;p&gt;From the [documentation](&lt;a href=&quot;https://www.styled-components.com/&quot; title=&quot;https://www.styled-components.com/&quot;&gt;https://www.styled-components.com/&lt;/a&gt;): Styled components combine the html element and the rules that style it.&lt;/p&gt;

&lt;h2 id=&quot;installation-and-basic-use-of-styled-components&quot;&gt;Installation and basic use of Styled Components&lt;/h2&gt;

&lt;p&gt;Styled Component are quite easy to use. First install the module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;yarn add styled-components
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And here is a basic example of how to use it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import styled from 'styled-components';

const Wrapper = styled.div`
  height: 100%;
  width: 100%;
`;

const Header = styled.header`
  width: 100%;
  height: 70px;
  background-color: #333;
  border-bottom: 1px solid #333;
  display: flex;
`;

const Body = styled.div`
  background-color: #fff;
  color: #333;
`;

export default function App(props) {
  return (
    &amp;lt;Wrapper&amp;gt;
      &amp;lt;Header/&amp;gt;
      &amp;lt;Body&amp;gt;
        &amp;lt;p&amp;gt;Hello Styled Components&amp;lt;/p&amp;gt;
      &amp;lt;/Body&amp;gt;
    &amp;lt;/Wrapper&amp;gt;
  );
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, you just create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;styled&lt;/code&gt; object we imported. That new &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is now a component we can use when we render. So no more dealing with classNames, the connection from the component to its styling is made directly.&lt;/p&gt;

&lt;p&gt;Because its CSS we can use all the classic CSS features like media queries, nesting, and psudo-selectors.&lt;/p&gt;

&lt;p&gt;We can also simple interpolate, like this example from [the documentation](&lt;a href=&quot;https://www.styled-components.com/&quot; title=&quot;https://www.styled-components.com/&quot;&gt;https://www.styled-components.com/&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const Button = styled.button`
  border-radius: 3px;
  padding: 0.25em 1em;
  margin: 0 1em;
  background: transparent;
  color: palevioletred;
  border: 2px solid palevioletred;

  ${props =&amp;gt; props.primary &amp;amp;&amp;amp; css`
    background: palevioletred;
    color: white;
  `}
`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When you interpolate a function in the CSS string definition like this, that function automatically has access to the props from the component it is being used in. Thats pretty neat.&lt;/p&gt;

&lt;p&gt;You can also attach props to the Styled Component and then add interpolated logic based on those props. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;// In the render:
&amp;lt;Header size=&quot;3em&quot;&amp;gt;&amp;lt;/Header&amp;gt;

// In the Styled Component definition
const Header = styled.div`
  size: ${props =&amp;gt; props.size || '1em'}
`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Or if we are trying to just extend an existing styled component without any logic we can do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const Button = styled.button`
  color: palevioletred;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

// We're extending Button with some extra styles
const TomatoButton = Button.extend`
  color: tomato;
  border-color: tomato;
`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can also wrap any existing component.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;const HelloComponent = props =&amp;gt; &amp;lt;div&amp;gt;Hello Styled Components!&amp;lt;/div&amp;gt;
const StyledComponent = styled(HelloComponent)`
  color: blue;
`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This is particularly useful when working with libraries like &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router&lt;/code&gt; because they give you components like &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; to use.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;// Link component from react-router
const StyledLink = styled(Link)`
  color: pink;

  &amp;amp;:hover {
    text-decoration: none;
  }
`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are a few more tricks available. Checkout the [full documentation](&lt;a href=&quot;https://www.styled-components.com/docs&quot; title=&quot;https://www.styled-components.com/docs&quot;&gt;https://www.styled-components.com/docs&lt;/a&gt;) for more.&lt;/p&gt;

&lt;p&gt;Styled Components, allow us to really simplify our display logic while still being able to customize our styling in complex ways. Oh yeah, it also works with React Native.&lt;/p&gt;

&lt;p&gt;So give Styled Components a try!&lt;/p&gt;

&lt;p&gt;I don’t really go into some of the other options for CSS with React, so for a nice outline of some of the other approaches check [this article](&lt;a href=&quot;https://blog.logrocket.com/the-best-styling-in-react-tutorial-youve-ever-seen-676f1284b945&quot; title=&quot;https://blog.logrocket.com/the-best-styling-in-react-tutorial-youve-ever-seen-676f1284b945&quot;&gt;https://blog.logrocket.com/the-best-styling-in-react-tutorial-youve-ever-seen-676f1284b945&lt;/a&gt;) out.&lt;/p&gt;

&lt;p&gt;You can also see the Official Documentation for Styled Components [here](&lt;a href=&quot;https://www.styled-components.com/&quot; title=&quot;https://www.styled-components.com/&quot;&gt;https://www.styled-components.com/&lt;/a&gt;).&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jul 2018 01:00:00 +0100</pubDate>
        <link>/posts/react-css-styled-components</link>
        <guid isPermaLink="true">/posts/react-css-styled-components</guid>
        
        <category>react</category>
        
        <category>css</category>
        
        
      </item>
    
      <item>
        <title>Get a Facebook Page Access Token That Never Expires</title>
        <description>&lt;p&gt;With the facebook API, page tokens can often be used in place of user tokens. This is very useful because if you are doing something with a business, its not ideal to have to use your own user token for everything. However, if you don’t want to have to recreate a new token all the time, you have to go through the process of getting a long-lived page access token.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT! -&lt;/strong&gt; Make sure that your user has permissions to access both the Facebook page and the Facebook groups, and make sure that the Facebook groups are linked to the Facebook page!&lt;/p&gt;

&lt;p&gt;Now lets talk about some definitions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;short-lived user access token&lt;/strong&gt;: This is the regular user_access_token, and it typically lasts about 2 hours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;long-lived user access token&lt;/strong&gt;: This user access token last about 60 days and you get it by extending a short-lived user access token&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;page access token&lt;/strong&gt;: These are similar to user access tokens and are created using a user access token.&lt;/p&gt;

&lt;p&gt;If you create a page access token using a short-lived user access token, it is also short-lived and expires in about 2 hours.&lt;/p&gt;

&lt;p&gt;But if you create a page access token using a long-lived user access token, then it does not have an expiration date. It lasts until its access is revoked.&lt;/p&gt;

&lt;p&gt;Bingo!&lt;/p&gt;

&lt;p&gt;To get a user access token you first have to have a facebook app, and then the user (in this case, you) has to grant permissions to your app. Specifically your app needs the permission called &lt;code class=&quot;highlighter-rouge&quot;&gt;manage_pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is to use &lt;a href=&quot;https://developers.facebook.com/tools/explorer&quot;&gt;Facebook’s Graph API Explorer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open up the page, then select your app Application dropdown and select “Get User Access Token” from the other dropdown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then in the popup, make sure you check the box for &lt;code class=&quot;highlighter-rouge&quot;&gt;manage_pages&lt;/code&gt; and click “Get Access Token”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then your access token will be populated in the Access Token field:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, then we need to exchange that short-lived token for a long-lived token, and we can do it with this same Facebook Graph API Explorer tool.&lt;/p&gt;

&lt;p&gt;We need to make a GET request to the Facebook Graph API to the path &lt;code class=&quot;highlighter-rouge&quot;&gt;/oauth/access_token&lt;/code&gt; with the following parameters:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;/oauth/access_token?  
    grant_type=fb_exchange_token&amp;amp;           
    client_id={app-id}&amp;amp;
    client_secret={app-secret}&amp;amp;
    fb_exchange_token={short-lived-token-we-just-made} 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So make a string that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;/oauth/access_token?grant_type=fb_exchange_token&amp;amp;client_id=9382767696389008&amp;amp;client_secret=1aac234d48ce90uu57c1b579faa92f00ufa&amp;amp;fb_exchange_token=EAAcZBbBDPXSwBACfeRskLz5LJJCigZBZBDyr4pmZCcVsrpFaoDUDSXthSDzdq4bqO75iEE17TBbpxIyQ1eTR3OIfGq2KPZBloF4xJ0I1GU1hxOnCGJmZBVg0DXU4IrDgcURm4ceKE4M1ZAFdGNmt5y2shsETLxAEKwZD
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And paste it into here and you’ll get your long-lived access token in the response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers4-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you have your long-lived user access token, we can exchange it by making a GET request in the Facebook Graph API Explorer to get the long-lived page access token.&lt;/p&gt;

&lt;p&gt;You need to take that long-lived user access token and paste it into the Access Token field then put this in the path field:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fb-page-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]/?fields=access_token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then you will get your long-lived page access token in the response!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2018/03/21/Graph_API_Explorer_-_Facebook_for_Developers5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Facebook Documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access Tokens: &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens&quot; title=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens&quot;&gt;https://developers.facebook.com/docs/facebook-login/access-tokens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extending Tokens: &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens/expiration-and-extension&quot; title=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens/expiration-and-extension&quot;&gt;https://developers.facebook.com/docs/facebook-login/access-tokens/expiration-and-extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
        <link>/posts/get-a-facebook-page-access-token-that-never-expires</link>
        <guid isPermaLink="true">/posts/get-a-facebook-page-access-token-that-never-expires</guid>
        
        <category>facebook</category>
        
        
      </item>
    
      <item>
        <title>Express.js With ES6 and Babel</title>
        <description>&lt;p&gt;Express.js doesn’t come with es6 out of the box. But its actually not that hard to add.&lt;/p&gt;

&lt;p&gt;I’m going to go over how to easily add ES6 support to your project using the &lt;a href=&quot;https://www.npmjs.com/package/babel-cli&quot; title=&quot;babel-cli&quot;&gt;babel-cli&lt;/a&gt;, as well as show you some of the things you need to do so your app will be ready for production later.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-cli&lt;/code&gt; gives us a command line tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-node&lt;/code&gt; that wraps around node and converts our ES6 code to basic javascript that node can read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However it is not recommended to use babel-node in production&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-express-app&quot;&gt;New Express App&lt;/h3&gt;

&lt;p&gt;First lets use the &lt;a href=&quot;http://expressjs.com/en/starter/generator.html&quot;&gt;express-generator&lt;/a&gt; to make a new Express.js app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ express --view pug --css sass new-app
$ cd new-app
$ npm install
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This generates a new express app in a new folder called new-app. And as you can see, I’ve told express to use sass for css and pug for the html templating.&lt;/p&gt;

&lt;h3 id=&quot;rearrange-files&quot;&gt;Rearrange Files&lt;/h3&gt;

&lt;p&gt;We are going to need to rearrange things a bit. This is because of the production build. We want all the javascript files isolated in a subfolder of our app because later we are going to tell babel to compile all the files and things get really messy if all our code is in at the same level as our dot files, node_modules folder, etc…&lt;/p&gt;

&lt;p&gt;So lets make a new folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; and move all our express stuff into it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ mkdir app
$ mv bin public routes views app.js app/
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-babel&quot;&gt;Install Babel&lt;/h3&gt;

&lt;p&gt;First we need to add 2 babel packages to our apps dev-dependencies.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ npm install babel-cli --save-dev
$ npm install babel-preset-env --save-dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;babel-preset-env&lt;/a&gt; by default behaves like &lt;a href=&quot;&quot;&gt;babel-preset-latest&lt;/a&gt;. Basically it includes all the new features of ECMAScript that are standardized each year. But it also allows you to specify specific environments to build for such as specific browsers you want to support.&lt;/p&gt;

&lt;p&gt;Next we need to add the babel configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; to our app folder. Make it look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This just tells babel to use &lt;a href=&quot;&quot;&gt;babel-preset-env&lt;/a&gt; that we just installed but take a look as some of the other configuration settings you can specify &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;try-it-out&quot;&gt;Try it Out&lt;/h3&gt;

&lt;p&gt;To try it out lets open our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file and replace this line&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;var express = require('express');
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;with this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;import express from 'express';
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And then we run express with babel with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;$ babel-node app/bin/www
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;p&gt;And you will notice that if you just run &lt;code class=&quot;highlighter-rouge&quot;&gt;node app/bin/www&lt;/code&gt; you get an error which is expected.&lt;/p&gt;

&lt;p&gt;Now lets add a npm script to make running this easier. Open up your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file and lets add a new line in the scripts section so it looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;...
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;,
    &quot;start:dev&quot;: &quot;babel-node ./app/bin/www&quot;
  }
...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we can run our babelized app with the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;npm run start:dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You might be asking, “Why don’t we just use the existing start script”. We need to save that for production because many production environments use the start script to run the app, but obviously we need to change it since we know &lt;code class=&quot;highlighter-rouge&quot;&gt;node ./bin/www&lt;/code&gt; doesn’t work.&lt;/p&gt;

&lt;h3 id=&quot;preparing-for-production&quot;&gt;Preparing for Production&lt;/h3&gt;

&lt;p&gt;So to prepare our app for production we need a build step that will take our ES6 code and generate node-friendly ES5 code in a file somewhere that node can run.&lt;/p&gt;

&lt;p&gt;To do this I like to another npm script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;...
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;,
    &quot;start:dev&quot;: &quot;babel-node ./app/bin/www&quot;,
    &quot;build&quot;: &quot;rm -rf ./build &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; babel --out-dir ./build --source-maps --copy-files ./app&quot;
  }
...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see this build script removes and recreates any existing &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder, and then runs the command &lt;code class=&quot;highlighter-rouge&quot;&gt;babel --out-dir ./build --source-maps --copy-files ./app&lt;/code&gt; which compiles all the javascript files and copies any other files  into the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder. Checkout &lt;a href=&quot;https://babeljs.io/docs/usage/cli/&quot;&gt;this page&lt;/a&gt; for more info on how the babel command works.&lt;/p&gt;

&lt;p&gt;You may want to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then the last thing to do is to change the start script to look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&quot;start&quot;: &quot;node ./app/bin/www&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we are good to go.&lt;/p&gt;

&lt;p&gt;Just make sure you run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; as part of any deployment into production.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate>
        <link>/posts/express-js-with-es6-and-babel</link>
        <guid isPermaLink="true">/posts/express-js-with-es6-and-babel</guid>
        
        <category>express</category>
        
        <category>node</category>
        
        <category>babel</category>
        
        <category>es6</category>
        
        
      </item>
    
      <item>
        <title>Deploying Node.js on Azure App Services</title>
        <description>&lt;p&gt;I know, I know, I know, Microsoft is not the company you think of when its time to figure out where to host your Node.js app, but Azure has a surprisingly robust suite of services now. And deploying to &lt;a href=&quot;https://azure.microsoft.com/en-us/services/app-service/&quot; title=&quot;Azure App Service&quot;&gt;Azure App Services&lt;/a&gt; was easier than I expected.&lt;/p&gt;

&lt;p class=&quot;lead&quot;&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;In this post I’m going to go over how to deploy a Node.js app to Azure App Services and also mention some of the things I learned from working with Azure.&lt;/p&gt;

&lt;h1 id=&quot;your-azure-account&quot;&gt;Your Azure Account&lt;/h1&gt;

&lt;h3 id=&quot;azure-account&quot;&gt;Azure account&lt;/h3&gt;

&lt;p&gt;First of all, you need to make sure you have an Azure account. If you don’t have one you can sign up for Azure &lt;a href=&quot;https://azure.microsoft.com/free/&quot; title=&quot;Azure Signup&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;azure-subscription&quot;&gt;Azure Subscription&lt;/h3&gt;

&lt;p&gt;Azure requires you to have something called a subscription before you can start using Azure services. This subscription is basically a billing program.&lt;/p&gt;

&lt;p&gt;Double check that you have a subscription by going to this page in your Azure portal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade&quot; title=&quot;https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade&quot;&gt;https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don’t see a subscription listed, then add one.&lt;/p&gt;

&lt;p&gt;If you have just signed up you’ll notice that one of the subscription options is “Free Trial” so you can use that and then later change to a “Pay as You Go” option later if you run out of free resources.&lt;/p&gt;

&lt;h3 id=&quot;azure-command-line-tool&quot;&gt;Azure Command Line Tool&lt;/h3&gt;

&lt;p&gt;We are going to be doing this entire setup using the Azure command line tool.&lt;/p&gt;

&lt;p&gt;You can download and install the command line tool by following the [instructions here](&lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot; title=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot;&gt;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Once you have that installed and working, we are ready to get started deploying the app.&lt;/p&gt;

&lt;h3 id=&quot;create-a-deployment-user&quot;&gt;Create a deployment user&lt;/h3&gt;

&lt;p&gt;This deployment user will be used when deploying your code. Basically we are going to configure the app to be deployed with git so when you do a &lt;code class=&quot;highlighter-rouge&quot;&gt;git push azure master&lt;/code&gt; it will ask you for the password that you set here.&lt;/p&gt;

&lt;p&gt;Run this in the command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az webapp deployment user set --user-name &amp;lt;username&amp;gt; --password &amp;lt;password&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-a-resource-group&quot;&gt;Create a resource group&lt;/h3&gt;

&lt;p&gt;Resource groups are basically just a way to group together resources so you can easily monitor them together, track costs, and stuff.&lt;/p&gt;

&lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;my-resource-group&amp;gt;&lt;/code&gt; with a resource group name you want.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az group create --name &amp;lt;my-resource-group&amp;gt; --location westeurope
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-a-service-plan&quot;&gt;Create a service plan&lt;/h3&gt;

&lt;p&gt;This is where you will set the how many resources your app will use.&lt;/p&gt;

&lt;p&gt;The command below will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;FREE&lt;/code&gt; tier app that has about 1 GB of RAM. You could also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;--sku&lt;/code&gt; tag to &lt;code class=&quot;highlighter-rouge&quot;&gt;BASIC&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARED&lt;/code&gt; or any of the other [service plans here](&lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/app-service/&quot; title=&quot;https://azure.microsoft.com/en-us/pricing/details/app-service/&quot;&gt;https://azure.microsoft.com/en-us/pricing/details/app-service/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Also be sure to set your &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;my-app-service-plan&amp;gt;&lt;/code&gt; and also make sure you set &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;my-resource-group&amp;gt;&lt;/code&gt; to your resource group name from earlier.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az appservice plan create --name &amp;lt;my-app-service-plan&amp;gt; --resource-group &amp;lt;my-resource-group&amp;gt; --sku FREE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-the-app&quot;&gt;Create the app&lt;/h3&gt;

&lt;p&gt;Now we actually create the app, you have to give your app an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; and then make sure you paste in all the other options from things you’ve created previously.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az webapp create --name &amp;lt;app-name&amp;gt; --resource-group &amp;lt;my-resource-group&amp;gt; --plan &amp;lt;my-app-service-plan&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configure-git-for-deployment&quot;&gt;Configure git for deployment&lt;/h3&gt;

&lt;p&gt;This command sill set up you app to be deployed using git. The response you get from this command will be a git url you can use as the git remote to deploy.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;az webapp deployment source config-local-git --name &amp;lt;app-name&amp;gt; --resource-group &amp;lt;my-resource-group&amp;gt; --query url --output tsv
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configure-startup-script&quot;&gt;Configure startup script&lt;/h3&gt;

&lt;p&gt;If you are coding in ES6 you probably have a build step. For that you may want to set up a custom deploy script. [Here is the documentation for how to do that](&lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script&quot; title=&quot;https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script&quot;&gt;https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However I’ve noticed a bug here. Sometimes the order of commands in the deploy script appears to not be honored. According to [this github issue](&lt;a href=&quot;https://github.com/projectkudu/kudu/issues/2699&quot; title=&quot;https://github.com/projectkudu/kudu/issues/2699&quot;&gt;https://github.com/projectkudu/kudu/issues/2699&lt;/a&gt;), it may be related to the Always On setting in your app. But regardless the app tries to start up before the my deploy script is finished, which means it tries to run code that isnt built from webpacker yet.&lt;/p&gt;

&lt;p&gt;So, in an effort to find a quick fix I just committed my built files which sucks. I’m still trying to figure out a better workaround here because there hasn’t been a lot of movement on that particular github issue.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate>
        <link>/posts/deploying-a-node-js-app-on-azure-app-services</link>
        <guid isPermaLink="true">/posts/deploying-a-node-js-app-on-azure-app-services</guid>
        
        <category>node</category>
        
        <category>azure</category>
        
        <category>production</category>
        
        
      </item>
    
  </channel>
</rss>
